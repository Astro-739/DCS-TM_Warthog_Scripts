// DCS F-16C Viper Thrustmaster Warthog/AVA/MFD Script by Astro
// TARGET version 3.0.24.618
// version 3, Aug 2024


include "target.tmh"
include "DCS_Fighter_Common.tmc"


// -------------------- INITIALISE --------------------

int autopilot_ALThold;	
int autopilot_ATThold;
int autopilot_off;
int autopilot;
char autopilot_mode;

int override;	
char override_dog;		

define AB 75											// detent position at AB% of full throttle reach


// -------------------- MAIN --------------------

int main()
{
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&Joystick, MODE_EXCLUDED);                    // Warthog Joystick
	Configure(&JoystickF18, MODE_EXCLUDED);
	//Configure(&Throttle, MODE_EXCLUDED);                  // Warthog Throttle
	Configure(&A320Pilot, MODE_EXCLUDED);
	Configure(&A320Copilot, MODE_EXCLUDED);
	Configure(&TCAQuadrant12, MODE_EXCLUDED);
	Configure(&TCAQuadrant34, MODE_EXCLUDED);
	Configure(&TCAYokeBoeing, MODE_EXCLUDED);
	Configure(&TCAQBoeing12, MODE_EXCLUDED);
	Configure(&TCAQBoeing34, MODE_EXCLUDED);
	Configure(&TCASidestickXPilot, MODE_EXCLUDED);
	Configure(&TCASidestickXCopilot, MODE_EXCLUDED);
	Configure(&ViperTQS, MODE_EXCLUDED);
	Configure(&ViperBBox, MODE_EXCLUDED);
	//Configure(&AVA_F16, MODE_EXCLUDED);					// AVA F16
    Configure(&AVA_F18, MODE_EXCLUDED);
	Configure(&FarmStickRight, MODE_EXCLUDED);
	Configure(&FarmStickLeft, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&T16000L, MODE_EXCLUDED);
	//Configure(&LMFD, MODE_EXCLUDED);						// Left MFD
	Configure(&RMFD, MODE_EXCLUDED);						// Right MFD
	Configure(&TFRPRudder, MODE_EXCLUDED);
	Configure(&TWCSThrottle, MODE_EXCLUDED);
	Configure(&TFRPHARudder, MODE_EXCLUDED);
	
	if(Init(&EventHandle)) return 1;
	
	SetKBRate(40, 50);																							// (a < b) a = pulse duration, b = delay duration
	SetKBLayout(KB_ENG);
	
	// -------------------- IOUMD Buttons --------------------
	
	SetShiftButton(&AVA_F16, S4, &Throttle, BSF, BSB, 0);
	
	// -------------------- COMMON --------------------
					
	dcs_fighter_common();								// load dcs COMMON controls
	dcs_fighter_mfd();									// load dcs MFD controls (in DCS_Fighter_Common.tmc)
														// before aircraft specific, to allow for overwriting of common controls when necessary

	// -------------------- FUNCTIONS --------------------
	
	// Start-up Sequence (overwrites common)    //TODO test if overwrite works
	startup = SEQ( CHAIN( L_ALT, D(10), 's' ), 												// MAIN PWR Switch - BATT
				   CHAIN( R_SHIFT, D(10), 's' ), 											// MAIN PWR Switch - MAIN PWR
				   CHAIN( R_CTL, D(10), 's' )); 											// JFS Switch - START 1

	// Autopilot function
	autopilot_ALThold = CHAIN( DOWN+L_CTL+L_SHIFT, D(10), DOWN+'p', D(100), UP+'p', D(), UP+L_CTL+L_SHIFT,		// Autopilot PITCH Switch - ALT HOLD  (extra 100ms needed by DCS)
							   EXEC( "autopilot_mode = 1;" ));
	
	autopilot_ATThold = CHAIN( DOWN+L_CTL+L_ALT, D(10), DOWN+'p', D(100), UP+'p', D(), UP+L_CTL+L_ALT,			// Autopilot PITCH Switch - ATT HOLD  (extra 100ms needed by DCS)
							   EXEC( "autopilot_mode = 1;" ));
	
	autopilot_off = CHAIN( DOWN+L_CTL, D(10), DOWN+'p', D(100), UP+'p', D(), UP+L_CTL, 							// Autopilot PITCH Switch - A/P OFF   (extra 100ms needed by DCS)
						   EXEC( "autopilot_mode = 0;" ));
	
	autopilot_mode = 0;

	autopilot = EXEC( "if(!autopilot_mode) ActKey( PULSE+KEYON+autopilot_ALThold );"
					  "if(autopilot_mode) ActKey( PULSE+KEYON+autopilot_off );"	);

	// A-A override function
	override_dog = 0;
	
	override = EXEC( "if(!override_dog) ActKey( PULSE+KEYON+L_CTL+'3' );"										// DOGFIGHT/Missile Override Switch - DOGFIGHT
					 "if(override_dog) ActKey( PULSE+KEYON+L_CTL+'4' );"										// DOGFIGHT/Missile Override Switch - MISSILE OVERRIDE
					 "override_dog = !override_dog;" );


	// Comms functions
//	U_MSR_short	= CHAIN( DOWN+L_CTL, D(10), DOWN+'i', D(100), UP+'i', D(), UP+L_CTL );							// Transmit Switch - IFF OUT	
//	U_MSR_long	= 0;
//	U_MSL_short	= CHAIN( DOWN+L_SHIFT, D(10), DOWN+'i', D(100), UP+'i', D(), UP+L_SHIFT );						// Transmit Switch - IFF IN
//	U_MSL_long	= 0;




	// -------------------- FLIGHT STICK --------------------

	// --DCS_Fighter_Common---------
	// TG - Camera/Gun Trigger
	// S1 - Nosewheel Steering Button
	// H1 - Trim Switch
	// JOYX
	// JOYY
	// -----------------------------	


	// Nosewheel Steering Button
	// S1
	MapKeyIOUMD(&AVA_F16, S1, 	SEQ( PULSE+F10, PULSE+F1 ),														// IU - F10 map
							 	's', 																			// OU - NWS A/R DISC MSL STEP Button
							    SEQ( PULSE+F10, PULSE+F1 ), 													// IM - F10 map
							    's',																 			// OM - NWS A/R DISC MSL STEP Button
							    SEQ( PULSE+F10, PULSE+F1 ),								 						// ID - F10 map
							    TEMPO( PULSE+'s',																// OD - [short] NWS A/R DISC MSL STEP Button
									   CHAIN( DOWN+L_ALT+R_SHIFT, D(10), PULSE+'6', D(), UP+L_ALT+R_SHIFT ),	//		[long]  Switch AG weapon type (SMS page Right MFD OSB 6)
									   500 ));

	// Weapon Release Button
	// S2
	MapKeyIO(&AVA_F16, S2,  	CHAIN( L_SHIFT, D(10), 'e' ), 													// I - EMER STORES JETTISON Button
								DX2);																			// O - Weapon Release

	// Expand FOV Button - S3
	MapKeyIOUMD(&AVA_F16, S3,  0,																				// IU - 
								override,																		// OU - dogfight then missile override
							    0, 																				// IM -
							    autopilot,															 			// OM - autopilot on/off (Autopilot PITCH Switch - ALT HOLD)
							    0,														 						// ID - 
							    0);																				// OD - 


	// Target Management Switch
	// H2U
	MapKeyIO(&AVA_F16, H2U, 	CHAIN( R_CTL, D(10), UARROW ),													// I - TMS up (KP*)
							 	DX7 );			 																// O - zoom in 
	// H2D
	MapKeyIO(&AVA_F16, H2D, 	CHAIN( R_CTL, D(10), DARROW ),													// I - TMS down  (KP\)
							 	DX9 );																			// O - zoom out
	// H2R							
	MapKeyIO(&AVA_F16, H2R, 	CHAIN( R_CTL, D(10), RARROW ),													// I - TMS right
							 	DX8 );						 													// O - snap view right MFD (LWIN+KP6)
	// H2L
	MapKeyIO(&AVA_F16, H2L, 	CHAIN( R_CTL, D(10), LARROW ),													// I - TMS left
							 	DX10 ); 																		// O - snap view left MFD (LWIN+KP4)

	// Display Management Switch
	// H3U
	MapKeyIO(&AVA_F16, H3U, 	TEMPO( CHAIN( DOWN+R_SHIFT, D(10), PULSE+'k', D(), UP+R_SHIFT ),				// I - kneeboard on/off
									   nightvision, 500 ),														// 	   [long] Night Vision Goggles toggle
								TEMPO( CHAIN( DOWN+R_ALT, D(10), PULSE+';', D(), UP+R_ALT ),					// O - DMS up
									   CHAIN( DOWN+L_CTL, D(10), PULSE+'v', D(), UP+L_CTL ), 500 ));			// 	   [long] Helmet Visor toggle
	// H3D
	MapKeyIO(&AVA_F16, H3D, 	TEMPO( CHAIN( DOWN+R_CTL, D(10), PULSE+'k', D(), UP+R_CTL ),					// I - kneeboard current position mark point
									   flashlight, 500 ),														//	   [long] Flashlight on/off
								CHAIN( R_ALT, D(10), '.' ));													// O - DMS down
	// H3R
	MapKeyIO(&AVA_F16, H3R, 	PULSE+']', 																		// I - kneeboard next page
								CHAIN( R_ALT, D(10), '/' ));													// O - DMS right
	// H3L
	MapKeyIO(&AVA_F16, H3L, 	TEMPO( PULSE+'[', 																// I - kneeboard previous page
									   CHAIN( DOWN+R_SHIFT, D(10), PULSE+'p', D(), UP+R_SHIFT ), 500 ),			//	   [long] Pilot Body toggle
								CHAIN( R_ALT, D(10), ',' ));													// O - DMS left


 	// Countermeasure Management Switch
	// H4U
	MapKeyIO(&AVA_F16, H4U, 	CHAIN( DOWN+L_SHIFT+L_CTL, D(10), PULSE+'f', D(), UP+L_SHIFT+L_CTL ),			// I - ECM XMIT Switch - Up
							 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+';', D(), UP+R_SHIFT ));						// O - Countermeasures Management Switch - Fwd
	// H4D
	MapKeyIO(&AVA_F16, H4D, 	CHAIN( DOWN+L_SHIFT+L_CTL, D(10), PULSE+'v', D(), UP+L_SHIFT+L_CTL ),			// I - ECM XMIT Switch - Down
							 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+'.', D(), UP+R_SHIFT )); 						// O - Countermeasures Management Switch - Aft
	// H4R
	MapKeyIO(&AVA_F16, H4R, 	CHAIN( DOWN+L_CTL, D(10), PULSE+'f', D(), UP+L_CTL ), 							// I - PROGRAM Knob - CW
			  				 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+'/', D(), UP+R_SHIFT ));						// O - Countermeasures Management Switch - Right
	// H4L
	MapKeyIO(&AVA_F16, H4L, 	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'f', D(), UP+L_SHIFT ), 						// I - PROGRAM Knob - CCW
							 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+',', D(), UP+R_SHIFT )); 						// O - Countermeasures Management Switch - Left
	// H4P
	MapKeyIO(&AVA_F16, H4P, 	0, 																				// I - 
							 	CHAIN( DOWN+L_ALT, D(10), DOWN+'f', D(100), UP+'f', D(), UP+L_ALT ));			// O - CHAFF/FLARE Dispense Button (program 5)



 
	// -------------------- THROTTLE --------------------

	// --DCS_Fighter_Common---------
	// Left Throttle Button
	// MSU/D/P
	// EACON/OFF Landing Gear
	// EOLNORM
	// EORNORM/MOTOR
	// EFRNORM/OVER
	// SC
	// APUON/OFF
	// RDRNRM/DIS Canopy
	// IDLELON/IDLERON
	// THR_LEFT
	// THR_RIGHT
	// THR_FC
	// SCX
	// SCY
	// -----------------------------



	// Autopilot
	// APENG	
	MapKeyIO(&Throttle, APENG, 	autopilot_ATThold,																// I - Autopilot ATT on (Autopilot PITCH Switch - ATT HOLD)
								autopilot );																	// O - Autopilot ALT on or AP Off (Autopilot PITCH Switch - ALT HOLD)
	// APDIS
	MapKey(&Throttle, APDIS, 	0); 																			// 
	// APPAT
	MapKey(&Throttle, APPAT, 	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'a', D(), UP+L_SHIFT )); 						// Autopilot ROLL Switch - HDG SEL
	// APAH
	MapKey(&Throttle, APAH, 	CHAIN( DOWN+L_CTL, D(10), PULSE+'a', D(), UP+L_CTL ));							// Autopilot ROLL Switch - ATT HOLD
	// APALT
	MapKey(&Throttle, APALT, 	CHAIN( DOWN+L_ALT, D(10), PULSE+'a', D(), UP+L_ALT ));							// Autopilot ROLL Switch - STRG SEL


	// Coolie Switch
	// CSU
	MapKeyIOUMD(&Throttle, CSU, TEMPO( CHAIN( DOWN+L_CTL, D(10), PULSE+USB[0x56], D(), UP+L_CTL ),				// IU - ICP DED Increment/Decrement Switch - Decrement   (L_CTL+NUM-)
									   CHAIN( DOWN+L_ALT+R_SHIFT, D(10), PULSE+'9', D(), UP+L_ALT+R_SHIFT ),	// 		[long] HSD zoom out (Right MFD OSB 19 on HSD page)
									   500 ),																	// 
								CHAIN( DOWN+L_ALT+R_SHIFT, D(10), PULSE+'9', D(), UP+L_ALT+R_SHIFT ),			// OU - Slave/Bore toggle (Right MFD OSB 19 on SMS page)
								CHAIN( DOWN+L_CTL, D(10), PULSE+USB[0x56], D(), UP+L_CTL ),						// IM - ICP DED Increment/Decrement Switch - Decrement   (L_CTL+NUM-)
								0, 																				// OM - 
								CHAIN( DOWN+L_CTL, D(10), PULSE+USB[0x56], D(), UP+L_CTL ),						// ID - ICP DED Increment/Decrement Switch - Decrement   (L_CTL+NUM-)
								0);																				// OD - 
	// CSD
	MapKeyIOUMD(&Throttle, CSD, TEMPO( CHAIN( DOWN+L_CTL, D(10), PULSE+USB[0x57], D(), UP+L_CTL ),				// IU - ICP DED Increment/Decrement Switch - Increment   (L_CTL+NUM+)
									   CHAIN( DOWN+L_ALT+R_SHIFT, D(10), PULSE+'0', D(), UP+L_ALT+R_SHIFT ),	// 		[long] HSD zoom in (Right MFD OSB 20 on HSD page)
									   500 ),																	// 
								DX14,																			// OU - ENABLE Switch - Depress
								CHAIN( DOWN+L_CTL, D(10), PULSE+USB[0x57], D(), UP+L_CTL ),						// IM - ICP DED Increment/Decrement Switch - Increment   (L_CTL+NUM+)
								DX14, 																			// OM - ENABLE Switch - Depress
								CHAIN( DOWN+L_CTL, D(10), PULSE+USB[0x57], D(), UP+L_CTL ),						// ID - ICP DED Increment/Decrement Switch - Increment   (L_CTL+NUM+)
								DX14);																			// OD - ENABLE Switch - Depress
	// CSR
	MapKeyIOUMD(&Throttle, CSR, CHAIN( L_CTL, D(10), RARROW ), 													// IU - ICP Data Control Switch - SEQ (dobber sequence)
							 	PULSE+'c',																		// OU - UNCAGE Switch
								CHAIN( L_CTL, D(10), RARROW ), 													// IM - ICP Data Control Switch - SEQ (dobber sequence)
								TEMPO( CHAIN( DOWN+R_CTL+R_SHIFT, D(10), PULSE+'v', D(), UP+R_CTL+R_SHIFT ),	// OM - FUEL QTY SEL Knob - CW
									   CHAIN( DOWN+R_CTL+R_SHIFT, D(10), PULSE+'c', D(), UP+R_CTL+R_SHIFT ), 	//		[long] FUEL QTY SEL Knob - NORM
									   500 ),																	//
								CHAIN( L_CTL, D(10), RARROW ), 													// ID - ICP Data Control Switch - SEQ (dobber sequence)
								PULSE+'c');																		// OD - UNCAGE Switch
	// CSL
	MapKeyIOUMD(&Throttle, CSL, CHAIN( L_CTL, D(10), LARROW ), 													// IU - ICP Data Control Switch - RET (dobber return)
								CHAIN( L_CTL, D(10), KP7 ),														// OU - ICP Priority Function Button - 7(MARK)
								CHAIN( L_CTL, D(10), LARROW ), 													// IM - ICP Data Control Switch - RET (dobber return)
								CHAIN( L_CTL, D(10), KP7 ), 													// OM - ICP Priority Function Button - 7(MARK)
								CHAIN( L_CTL, D(10), LARROW ), 													// ID - ICP Data Control Switch - RET (dobber return)
								CHAIN( L_CTL, D(10), KP7 ));													// OD - ICP Priority Function Button - 7(MARK)

	// Speedbrake Switch
	// SPDF
	MapKeyIO(&Throttle, SPDF, 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+USB[0x55], D(), UP+R_SHIFT ),					// I - snap zoom max   (R_SHIFT+KP*)
							   	DX31 );																			// O - speedbrake extend and stay in place
	MapKeyRIO(&Throttle, SPDF, 	PULSE+KPENT,																	// I - snap zoom normal
								CHAIN( DOWN+L_CTL, D(10), PULSE+'b', D(), UP+L_CTL ));							// O - speedbrake fully retract
	// SPDB
	MapKeyIOUMD(&Throttle, SPDB, CHAIN( DOWN+R_SHIFT, D(10), PULSE+USB[0x54], D(), UP+R_SHIFT ),				// IU - snap zoom min    (R_SHIFT+KP/)
								CHAIN( L_SHIFT, D(10), 'b' ),													// OU - speedbrake extend (momentary)
								EXEC( "if(WHDN_mode) ActKey( KEYON+'w' );" 										// IM - [WHDN] wheel brake
									  "else ActKey( PULSE+KEYON+USB[0x54] );" ),								//		snap zoom min
								CHAIN( L_SHIFT, D(10), 'b' ),													// OM - speedbrake extend (momentary)
								CHAIN( DOWN+R_SHIFT, D(10), PULSE+USB[0x54], D(), UP+R_SHIFT ),					// ID - snap zoom min    (R_SHIFT+KP/)
								CHAIN( L_SHIFT, D(10), 'b' ));													// OD - speedbrake extend (momentary)
	MapKeyRIOUMD(&Throttle, SPDB, PULSE+KPENT,																	// IU - snap zoom normal
								CHAIN( D(100), DOWN+L_CTL, D(10), PULSE+'b', D(), UP+L_CTL ),					// OU - speedbrake fully retract
								EXEC( "if(WHDN_mode) ActKey( 'w' );"											// IM - [WHDN] release 'w'
									  "else ActKey( PULSE+KEYON+KPENT );" ),									//		snap zoom normal
								CHAIN( D(100), DOWN+L_CTL, D(10), PULSE+'b', D(), UP+L_CTL ),					// OM - speedbrake fully retract
								PULSE+KPENT,																	// ID - snap zoom normal
								CHAIN( D(100), DOWN+L_CTL, D(10), PULSE+'b', D(), UP+L_CTL ));					// OD - speedbrake fully retract
								
	// China Hat
	// CHF
	MapKeyIO(&Throttle, CHF, 	brightness_up, 																	// I - brightness up for goggle/HMCS
							 	REXEC( 20, 200, "ActKey( PULSE+KEYON+'=' );" ));								// O - ANT ELEV Knob - CCW    (REXEC to slow down repeat press)
	// CHB
	MapKeyIO(&Throttle, CHB, 	brightness_down,																// I - brightness down for goggle/HMCS
							 	REXEC( 21, 200, "ActKey( PULSE+KEYON+'-' );" ));								// O - ANT ELEV Knob - CW    (REXEC to slow down repeat press)

	// Pinky Switch (exterior lighting)
	// PSF
	MapKeyIO(&Throttle, PSF, 	CHAIN( DOWN+R_ALT, D(10), PULSE+'l', D(), UP+R_ALT ),								// I - FLASH STEADY Switch - FLASH/STEADY
								CHAIN( DOWN+R_SHIFT, D(10), PULSE+'l', D(), UP+R_SHIFT, D(100), 					// O - MASTER Switch - NORM
									   DOWN+R_SHIFT+L_SHIFT, D(10), PULSE+'l', D(), UP+R_SHIFT+L_SHIFT, D(100),		//	   WING/TAIL Switch - BRT
									   DOWN+R_CTL+L_SHIFT, D(10), PULSE+'l', D(), UP+R_CTL+L_SHIFT, D(),			//	   FUSELAGE Switch - BRT
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) )); 								//     LED4 ON								
	MapKeyRIO(&Throttle, PSF, 	0, 																					// I - 
							  	CHAIN( DOWN+R_CTL, D(10), PULSE+'l', D(), UP+R_CTL, D(100),							// O - MASTER Switch - A-C covert
									   DOWN+R_SHIFT+L_CTL, D(10), PULSE+'l', D(), UP+R_SHIFT+L_CTL, D(100),			//	   WING/TAIL Switch - OFF
									   DOWN+R_CTL+L_CTL, D(10), PULSE+'l', D(), UP+R_CTL+L_CTL ));					//	   FUSELAGE Switch - OFF
	// PSB
	MapKeyIO(&Throttle, PSB, 	SEQ( CHAIN( DOWN+R_SHIFT+L_ALT, D(10), PULSE+'l', D(), UP+R_SHIFT+L_ALT, D(),		// I - WING/TAIL Switch - DIM
											DOWN+R_CTL+L_ALT, D(10), PULSE+'l', D(), UP+R_CTL+L_ALT ),				// 	   FUSELAGE Switch - DIM
									 CHAIN( DOWN+R_SHIFT+L_SHIFT, D(10), PULSE+'l', D(), UP+R_SHIFT+L_SHIFT, D(),	//	   WING/TAIL Switch - BRT
											DOWN+R_CTL+L_SHIFT, D(10), PULSE+'l', D(), UP+R_CTL+L_SHIFT )),			//	   FUSELAGE Switch - BRT
							 	CHAIN( DOWN+L_CTL, D(10), PULSE+'l', D(), UP+L_CTL, D(), 							// O - MASTER Switch - ALL covert
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) )); 								//     LED4 OFF
	MapKeyRIO(&Throttle, PSB, 	0, 																					// I - 
							  	CHAIN( DOWN+R_CTL, D(10), PULSE+'l', D(), UP+R_CTL, D(), 							// O - MASTER Switch - A-C covert
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) )); 								//     LED4 ON
								
	// LDGH
	MapKeyIOUMD(&Throttle, LDGH, 	0, 																				// IU - 
									CHAIN( R_CTL, D(10), 'c' ),														// OU - Master Caution Button
									CHAIN( DOWN+R_CTL, D(10), PULSE+BSP, D(), UP+R_CTL ), 							// IM - Upload F-16 DTC (Data Cartridge)
									CHAIN( R_CTL, D(10), 'c' ),														// OM - Master Caution Button
									0, 																				// ID - 
									CHAIN( R_CTL, D(10), 'c' ));													// OD - Master Caution Button

	// Flaps Switch (RF Switch)
	// FLAPU
	MapKey(&Throttle, FLAPU,  		PULSE+'r');																		// RF Switch - NORM
	// FLAPM
	MapKey(&Throttle, FLAPM, 		CHAIN( DOWN+L_CTL, D(10), PULSE+'r', D(), UP+L_CTL ));							// RF Switch - QUIET
	// FLAPD
	MapKey(&Throttle, FLAPD,  		CHAIN( DOWN+R_CTL, D(10), PULSE+'r', D(), UP+R_CTL ));							// RF Switch - SILENT


	// Canopy        //TODO DX23
	// RDRNRM
	MapKeyIOUMD(&Throttle, RDRNRM, 	0, 																				// IU - 
									0,																				// OU - 
									CHAIN( DOWN+L_SHIFT, D(10), PULSE+'c', D(), UP+L_SHIFT ),						// IM - Canopy Handle - DOWN/UP
									CHAIN( L_CTL, D(10), 'c' ),														// OM - Canopy - OPEN/CLOSE
									0,																				// ID - 
									0);																				// OD - 

	// Engine Operation
	// EOLIGN (overwrites common)  //TODO test
	MapKeyIO(&Throttle, EOLIGN,		startup, 																		// I - Start-up Sequence
									CHAIN( DOWN+R_SHIFT, D(10), PULSE+HOME, D(), UP+R_SHIFT ));						// O - Right Throttle - IDLE
	// EOLNORM in common
	// EOLMOTOR
	MapKeyIO(&Throttle, EOLMOTOR, 	CHAIN( DOWN+L_SHIFT, D(10), DOWN+'s', D(100), UP+'s', D(), UP+L_SHIFT ),		// I - JFS Switch - START 2
									0); 																			// O - 
	// EORIGN (overwrites common)
	MapKey(&Throttle, EORIGN, 		0); 																			// 
	// EORNORM in common
	// EORMOTOR in common


	// Engine Override Left
	// EFLNORM
	MapKeyIO(&Throttle, EFLNORM, 	CHAIN( 0, D(), 																	// I - MANUAL PITCH Override Switch - NORM
										   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5) ),							// 	   LED5 OFF for MANUAL PITCH Override
									0 );																			// O - 
	// EFLOVER
	MapKeyIO(&Throttle, EFLOVER, 	CHAIN( DX22, D(),																// I - MANUAL PITCH Override Switch - OVRD   // TODO ********* FIX DX in DCS
										   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5) ),							// 	   LED5 ON for MANUAL PITCH Override
									0 );																			// O - 

	// Engine idle/off (overwrite of common)
	// IDLELON
	MapKey(&Throttle, IDLELON, 		CHAIN( DOWN+R_SHIFT, D(10), PULSE+END, D(), UP+R_SHIFT ));						// Throttle - OFF
	MapKeyR(&Throttle, IDLELON, 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+HOME, D(), UP+R_SHIFT ));						// Throttle - IDLE
	// IDLERON
	MapKey(&Throttle, IDLERON, 		0);																				//

	// SC
	MapKeyIO(&Throttle, SC, 	TEMPO( CHAIN( DOWN+R_CTL, D(10), PULSE+INS, D(), UP+R_CTL ),					// I - [short] re-centre IR tracker
									   CHAIN( DOWN+L_SHIFT, D(10), PULSE+'`', D(), UP+L_SHIFT),					//     [long] discord game overlay
									   500),
								PULSE+'d');																		// O - Expand/FOV Button


	// U LAYER - Air-to-Air Mode
	// BSF - LED1 ON/OFF
	MapKeyIO(&Throttle, BSF, 	CHAIN( override, D(100),														// I - DOGFIGHT/Missile Override Switch - DOGFIGHT
									   DOWN+R_SHIFT, D(10), PULSE+'a', D(), UP+R_SHIFT ),						// 	   MASTER ARM Switch - MASTER ARM
								CHAIN( PULSE+'1', D(100),														// O - A-A mode on
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1) )); 							// 	   LED1 ON for U layer
	MapKeyRIO(&Throttle, BSF, 	CHAIN( DOWN+L_CTL, D(10), PULSE+'0', D(), UP+L_CTL,								// I - DOGFIGHT/Missile Override Switch - CENTER
									   EXEC( "override_dog = 0;" ), D(100) ),									//	   reset override status
								CHAIN( DOWN+L_CTL, D(10), PULSE+'0', D(), UP+L_CTL,								// O - DOGFIGHT/Missile Override Switch - CENTER
									   EXEC( "override_dog = 0;" ),	D(),										//	   in case override was started when in A-A mode
									   PULSE+'1', D(100),														// 	   A-A mode off
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1) )); 							//     LED1 OFF for U layer
	
	// M LAYER - Navigation Mode
	// BSM - LED2 ON/OFF
	MapKey(&Throttle, BSM, 		CHAIN( D(200), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)));					// LED2 ON for M layer
	MapKeyR(&Throttle, BSM, 	LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2)); 									// LED2 OFF for M layer

	// D LAYER - Air-to-Ground Mode
	// BSB - LED3 ON/OFF
	MapKeyIO(&Throttle, BSB, 	CHAIN( PULSE+'2', D(100),														// I - A-G mode on
									   DOWN+R_SHIFT+R_CTL, D(10), PULSE+'a', D(), UP+R_SHIFT+R_CTL,	D(),		//     MASTER ARM Switch - SIMULATE
									   DOWN+R_SHIFT, D(10), PULSE+'e', D(), UP+R_SHIFT ),						//	   GND JETT ENABLE Switch - ENABLE
								CHAIN( PULSE+'2', D(100),														// O - A-G mode on
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3) )); 							//     LED3 ON for D layer
	MapKeyRIO(&Throttle, BSB, 	CHAIN( PULSE+'2', D(100),														// I - A-G mode off
									   DOWN+R_CTL, D(10), PULSE+'a', D(), UP+R_CTL, D(),						//     MASTER ARM Switch - OFF
									   DOWN+R_CTL, D(10), PULSE+'e', D(), UP+R_CTL ),							//	   GND JETT ENABLE Switch - OFF
								CHAIN( PULSE+'2', D(100),														// O - A-G mode off
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3) )); 							//     LED3 OFF for D layer


}

// -------------------- AFTERBURNER DETENT --------------------

int afterburnerdetent(int x)
{
	if (x == 1) {		// Activate detent
		SetCustomCurve(&Throttle, THR_LEFT, LIST(0,0, 25,25, 50,50, AB,AB, 100,AB));
	}
	else {				// Throttle back to full reach
		SetSCurve(&Throttle, THR_LEFT, 0, 0, 0, 0, 0);
	}
}



// -------------------- EVENTHANDLE --------------------

int EventHandle(int type, alias o, int x)
{
	if ((&o == &Throttle) & (x == THR_LEFT)) {									// Detect left throttle position for afterburner detent
		if (afterburnerdetent_present & afterburnerdetent_lifted) {				// If afterburnerdetent present and detent is lifted
			if (Throttle[THR_LEFT] < (100-AB)*(2*AMAX)/100) {					//   If left throttle below afterburner detent value of AB%
				afterburnerdetent(1);											//     Re-engage detent
				afterburnerdetent_lifted = 0;									//     Detent is no longer lifted
			}
		} 
	}
	DefaultMapping(&o, x);
}