// DCS F-5E3 Tiger II Thrustmaster Warthog Script by Astro
// version 1, Feb 2023


include "target.tmh"
include "DCS_Fighter_Common.tmc"


// -------------------- INITIALISE --------------------

int extlight_full;				
int extlight_fulltoform;		
int extlight_covtoform;			
int extlight_covert;			

int groundcrewstartup;

int speedbrakes_open;
int speedbrakes_close;

define AB 77											// detent position at AB% of full throttle reach


// -------------------- MAIN --------------------

int main()
{
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&Joystick, MODE_EXCLUDED);                    // Warthog Joystick
	Configure(&JoystickF18, MODE_EXCLUDED);
	//Configure(&Throttle, MODE_EXCLUDED);                  // Warthog Throttle
	Configure(&A320Pilot, MODE_EXCLUDED);
	Configure(&A320Copilot, MODE_EXCLUDED);
	Configure(&TCAQuadrant12, MODE_EXCLUDED);
	Configure(&TCAQuadrant34, MODE_EXCLUDED);
	Configure(&TCAYokeBoeing, MODE_EXCLUDED);
	Configure(&TCAQBoeing12, MODE_EXCLUDED);
	Configure(&TCAQBoeing34, MODE_EXCLUDED);
	Configure(&TCASidestickXPilot, MODE_EXCLUDED);
	Configure(&TCASidestickXCopilot, MODE_EXCLUDED);
	Configure(&ViperTQS, MODE_EXCLUDED);
	Configure(&ViperBBox, MODE_EXCLUDED);
	//Configure(&AVA_F16, MODE_EXCLUDED);					// AVA F16
    Configure(&AVA_F18, MODE_EXCLUDED);
	Configure(&FarmStickRight, MODE_EXCLUDED);
	Configure(&FarmStickLeft, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&T16000L, MODE_EXCLUDED);
	//Configure(&LMFD, MODE_EXCLUDED);						// Left MFD
	Configure(&RMFD, MODE_EXCLUDED);						// Right MFD
	Configure(&TFRPRudder, MODE_EXCLUDED);
	Configure(&TWCSThrottle, MODE_EXCLUDED);
	Configure(&TFRPHARudder, MODE_EXCLUDED);

	if(Init(&EventHandle)) return 1;
	
	SetKBRate(40, 50);									// (a,b) a = pulse duration, b = delay duration
	SetKBLayout(KB_ENG);
	
	// -------------------- IOUMD Buttons --------------------
	
	SetShiftButton(&AVA_F16, S4, &Throttle, BSF, BSB, 0);
	
	// -------------------- COMMON --------------------
					
	dcs_fighter_common();								// load dcs COMMON controls
	dcs_fighter_mfd();									// load dcs MFD controls (in DCS_Fighter_Common.tmc)
														// before aircraft specific, to allow for overwriting of common controls when necessary

	// -------------------- FUNCTIONS --------------------
					
	// Exterior Lighting - Full
	extlight_full = CHAIN( DOWN+R_ALT+R_CTL, D(10), DOWN+'i', D(1000), UP+'i', D(), UP+R_ALT+R_CTL, D(),		// Exterior Lights Nav Knob - CW/Increase
						   DOWN+R_ALT+R_CTL, D(10), DOWN+'o', D(1000), UP+'o', D(), UP+R_ALT+R_CTL, D(),		// Exterior Lights Formation Knob - CW/Increase
						   DOWN+L_SHIFT, D(10), PULSE+'l', D(), UP+L_SHIFT );									// Exterior Lights Beacon Switch - ON
						
	// Exterior Lighting - Formation
	extlight_fulltoform = CHAIN( DOWN+R_ALT+R_CTL, D(10), DOWN+'k', D(1000), UP+'k', D(), UP+R_ALT+R_CTL, D(),	// Exterior Lights Nav Knob - CCW/Decrease
								 DOWN+L_CTL, D(10), PULSE+'l', D(), UP+L_CTL );									// Exterior Lights Beacon Switch - OFF
						
	extlight_covtoform = CHAIN( DOWN+R_ALT+R_CTL, D(10), DOWN+'o', D(1000), UP+'o', D(), UP+R_ALT+R_CTL );		// Exterior Lights Formation Knob - CW/Increase
						
	// Exterior Lighting - Covert
	extlight_covert = CHAIN( DOWN+R_ALT+R_CTL, D(10), DOWN+'l', D(1000), UP+'l', D(), UP+R_ALT+R_CTL, D(),		// Exterior Lights Formation Knob - CCW/Decrease
							 DOWN+R_ALT+R_CTL, D(10), DOWN+'k', D(200), UP+'k', D(), UP+R_ALT+R_CTL, D(),		// Exterior Lights Nav Knob - CCW/Decrease
							 DOWN+L_CTL, D(10), PULSE+'l', D(), UP+L_CTL );										// Exterior Lights Beacon Switch - OFF

	// Ground Crew Start-up
	groundcrewstartup = SEQ( CHAIN( PULSE+USB[0x31], D(100), PULSE+F8, D(100), PULSE+F4, D(100), PULSE+F1, D(8000), 	// Radio menu (\), Ground crew, Wheel Chocks, Place 
							   		PULSE+USB[0x31], D(100), PULSE+F8, D(100), PULSE+F5, D(100), PULSE+F1, D(10000),	// Radio menu (\), Ground crew, Ground Air Supply, Connect
							   		PULSE+USB[0x31], D(100), PULSE+F8, D(100), PULSE+F5, D(100), PULSE+F3 ), 			// Radio menu (\), Ground crew, Ground Air Supply, Apply
							 CHAIN( PULSE+USB[0x31], D(100), PULSE+F8, D(100), PULSE+F5, D(100), PULSE+F3, D(25000),	// Radio menu (\), Ground crew, Ground Air Supply, Apply
							   		PULSE+USB[0x31], D(100), PULSE+F8, D(100), PULSE+F5, D(100), PULSE+F2, D(15000),	// Radio menu (\), Ground crew, Ground Air Supply, Disconnect
							   		PULSE+USB[0x31], D(100), PULSE+F8, D(100), PULSE+F4, D(100), PULSE+F2 ));			// Radio menu (\), Ground crew, Wheel Chocks, Remove


	// Speedbrake functions
	speedbrakes_open  = CHAIN( DOWN+L_SHIFT, D(10), PULSE+'b', D(), UP+L_SHIFT ); 								// speedbrake extend

	speedbrakes_close = CHAIN( D(100), DOWN+L_CTL, D(10), PULSE+'b', D(), UP+L_CTL );							// speedbrake fully retract




	// -------------------- FLIGHT STICK --------------------

	// --DCS_Fighter_Common---------
	// TG - Camera/Gun Trigger
	// S1 - Nosewheel Steering Button
	// H1 - Trim Switch
	// JOYX
	// JOYY
	// -----------------------------	



	// Weapon Release Button
	// S2
	MapKeyIOUMD(&AVA_F16, S2,  SEQ( CHAIN( L_SHIFT+L_CTL, D(10), '9' ),										// IU - Emergency All Jettison Button Cover - OPEN
									 CHAIN( L_SHIFT+L_CTL, D(10), '0' )),										//		Emergency All Jettison Button
							    CHAIN( R_ALT, D(10), SPC ),														// OU - weapon release
								SEQ( CHAIN( L_SHIFT+L_CTL, D(10), '9' ),										// IM - Emergency All Jettison Button Cover - OPEN
									 CHAIN( L_SHIFT+L_CTL, D(10), '0' )),										//		Emergency All Jettison Button
							    0,																			 	// OM - 
							    SEQ( CHAIN( L_SHIFT+L_CTL, D(10), '9' ),										// ID - Emergency All Jettison Button Cover - OPEN
									 CHAIN( L_SHIFT+L_CTL, D(10), '0' )),										//		Emergency All Jettison Button
							    CHAIN( R_ALT, D(10), SPC ));													// OD - weapon release

	// Expand FOV Button - S3
	MapKeyIOUMD(&AVA_F16, S3,  0, 																				// IU -
							    0,																				// OU - 
							    0, 																				// IM -
							    0,													 							// OM - 
							    0,														 						// ID - 
							    0);																				// OD - 

	// Target Management Switch
	// H2U
	MapKeyIO(&AVA_F16, H2U, 	PULSE+ENT,																		// I - AN/APQ-159 Radar ACQ Button
							 	USB[0x55]);		 																// O - zoom in  (KP*) 
	// H2R							
	MapKeyIO(&AVA_F16, H2R, 	0,																				// I -
							 	CHAIN( L_WIN, D(10), KP6 )); 													// O - snap view right 
	// H2D
	MapKeyIO(&AVA_F16, H2D, 	0,																				// I -
							 	USB[0x54]);																		// O - zoom out  (KP\)
	// H2L
	MapKeyIO(&AVA_F16, H2L, 	0,																				// I -
							 	CHAIN( L_WIN, D(10), KP4 )); 													// O - snap view left 

	// Display Management Switch
	// H3U
	MapKeyIO(&AVA_F16, H3U, 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+'k', D(), UP+R_SHIFT ),						// I - kneeboard on/off
								CHAIN( R_ALT, D(10), '7' ));													// O - RWR Indicator Control SEARCH Button
	// H3R
	MapKeyIO(&AVA_F16, H3R, 	PULSE+']', 																		// I - kneeboard next page
								CHAIN( R_ALT, D(10), 'y' ));													// O - RWR Indicator Control T Button
	// H3D
	MapKeyIO(&AVA_F16, H3D, 	CHAIN( DOWN+R_CTL, D(10), PULSE+'k', D(), UP+R_CTL ),							// I - kneeboard current position mark point
								CHAIN( R_ALT, D(10), '6' ));													// O - RWR Indicator Control MODE Button
	// H3L
	MapKeyIO(&AVA_F16, H3L, 	TEMPO( PULSE+'[', 																// I - kneeboard previous page
									   CHAIN( DOWN+R_SHIFT, D(10), PULSE+'p', D(), UP+R_SHIFT ), 500 ),			//	   [long] Pilot Body toggle								
								CHAIN( R_ALT, D(10), 'i' ));													// O - RWR Indicator Control UNKNOWN SHIP Button

 	// Countermeasure Management Switch
	// H4U	
	MapKeyIO(&AVA_F16, H4U, 	0,																				// I - 
							 	PULSE+'5');																		// O - Dogfight/Resume Search Switch - FORWARD (DM)
	// H4R
	MapKeyIO(&AVA_F16, H4R, 	0, 																				// I - PROGRAM Knob - CW
			  				 	PULSE+'r');																		// O - Dogfight/Resume Search Switch - CENTER-PRESS (RESUME SEARCH)
	// H4D
	MapKeyIO(&AVA_F16, H4D, 	0, 																				// I -
							 	PULSE+'6'); 																	// O - Dogfight/Resume Search Switch - AFT (DG)
	// H4L
	MapKeyIO(&AVA_F16, H4L, 	0, 																				// I - PROGRAM Knob - CCW
							 	0); 																			// O - 
	// H4P
	MapKeyIO(&AVA_F16, H4P, 	DX19, 																			// I - srs ptt (in combination with Discord ptm)
							 	'q'); 																			// O - CHAFF/FLARE Dispense Button

	
	
 
	// -------------------- THROTTLE --------------------

	// --DCS_Fighter_Common---------
	// Left Throttle Button
	// MSU/D/R/L/P
	// EACON/OFF Landing Gear
	// EOLNORM
	// EORNORM/MOTOR
	// SC
	// APUON/OFF
	// RDRNRM/DIS Canopy
	// IDLELON/IDLERON
	// THR_LEFT
	// THR_RIGHT
	// THR_FC
	// SCX
	// SCY
	// -----------------------------



	// Autopilot
	// APENG	
	MapKeyIO(&Throttle, APENG, 	SEQ( PULSE+'1',																	// I - AN/ASG-31 Sight Mode Selector - MSL
									 PULSE+'`' ),																// 	   AN/ASG-31 Sight Mode Selector - OFF
								SEQ( CHAIN( DOWN+R_CTL, D(10), PULSE+'9', D(), UP+R_CTL ),						// O - AN/APQ-159 Radar Mode Selector - STBY
									 CHAIN( DOWN+R_CTL, D(10), PULSE+'0', D(), UP+R_CTL )));					// 	   AN/APQ-159 Radar Mode Selector - OPER
	// APDIS
	MapKey(&Throttle, APDIS, 	0); 																			// 
	// APPAT
	MapKey(&Throttle, APPAT, 	PULSE+'2'); 																	// AN/ASG-31 Sight Mode Selector - A/A1 GUNS
	// APAH
	MapKey(&Throttle, APAH, 	PULSE+'1');																		// AN/ASG-31 Sight Mode Selector - MSL
	// APALT
	MapKey(&Throttle, APALT, 	PULSE+'4');																		// AN/ASG-31 Sight Mode Selector - MAN


	// Coolie Switch
	// CSU
	MapKeyIOUMD(&Throttle, CSU, CHAIN( L_CTL+L_SHIFT, D(10), '-' ), 											// IU - Missile Volume Knob - CCW/Decrease
								PULSE+'-', 																		// OU - AN/APQ-159 Radar Range Selector - CCW/Decrease
								0, 																				// IM - 
								PULSE+'-', 																		// OM - AN/APQ-159 Radar Range Selector - CCW/Decrease
								0, 																				// ID - 
								0);																				// OD - 
	// CSD
	MapKeyIOUMD(&Throttle, CSD, CHAIN( L_CTL+L_SHIFT, D(10), '=' ), 											// IU - Missile Volume Knob - CW/Increase
								PULSE+'=',																		// OU - AN/APQ-159 Radar Range Selector - CW/Increase
								0, 																				// IM - 
								PULSE+'=',																		// OM - AN/APQ-159 Radar Range Selector - CW/Increase
								0, 																				// ID - 
								0);																				// OD - 
	// CSR
	MapKeyIOUMD(&Throttle, CSR, CHAIN( DOWN+L_CTL+L_SHIFT, D(10), PULSE+'7', D(), UP+L_CTL+L_SHIFT ),		 	// IU - Armament Position Selector Switch (RIGHT WINGTIP) - ON/OFF
							 	CHAIN( R_SHIFT, D(10), 'm' ),													// OU - Missile Uncage Switch
								0, 																				// IM - 
								TEMPO( 0, PULSE+'m', 500 ),														// OM - [long] Toggle Mirrors
								0, 																				// ID - 
								0);																				// OD - 
	// CSL
	MapKeyIOUMD(&Throttle, CSL, CHAIN( DOWN+L_CTL+L_SHIFT, D(10), PULSE+'1', D(), UP+L_CTL+L_SHIFT ),			// IU - Armament Position Selector Switch (LEFT WINGTIP) - ON/OFF
								CHAIN( L_SHIFT, D(10), 'c' ),													// OU - AN/ASG-31 Sight Cage Switch
								0, 																				// IM - 
								CHAIN( L_SHIFT, D(10), 'c' ),													// OM - AN/ASG-31 Sight Cage Switch
								0, 																				// ID - 
								0);																				// OD - 


	// Speedbrake Switch
	// SPDF
	MapKeyIO(&Throttle, SPDF, 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+USB[0x55], D(), UP+R_SHIFT ),					// I - snap zoom max   (R_SHIFT+KP*)
								speedbrakes_open );																// O - Open Speed Brakes
	MapKeyRIO(&Throttle, SPDF, 	PULSE+KPENT,																	// I - snap zoom normal
								speedbrakes_close );															// O - Close Speed Brakes
	// SPDB
	MapKeyIOUMD(&Throttle, SPDB, CHAIN( DOWN+R_SHIFT, D(10), PULSE+USB[0x54], D(), UP+R_SHIFT ),				// IU - snap zoom min    (R_SHIFT+KP/)
								speedbrakes_open,																// OU - Open Speed Brakes Momentary
								EXEC( "if(WHDN_mode) ActKey( KEYON+'w' );" 										// IM - [WHDN] wheel brake
									  "else ActKey( PULSE+KEYON+USB[0x54] );" ),								//		snap zoom min
								speedbrakes_open,																// OM - Open Speed Brakes Momentary
								CHAIN( DOWN+R_SHIFT, D(10), PULSE+USB[0x54], D(), UP+R_SHIFT ),					// ID - snap zoom min    (R_SHIFT+KP/)
								speedbrakes_open );																// OD - Open Speed Brakes Momentary
	MapKeyRIOUMD(&Throttle, SPDB, PULSE+KPENT,																	// IU - snap zoom normal
								speedbrakes_close,																// OU - Close Speed Brakes
								EXEC( "if(WHDN_mode) ActKey( 'w' );"											// IM - [WHDN] release 'w'
									  "else ActKey( PULSE+KEYON+KPENT );" ),									//		snap zoom normal
								speedbrakes_close,																// OM - Close Speed Brakes
								PULSE+KPENT,																	// ID - snap zoom normal
								speedbrakes_close );															// OU - Close Speed Brakes

								
	// China Hat
	// CHF
	MapKeyIO(&Throttle, CHF, 	brightness_up, 																	// I - brightness up for reticle/NVG
							 	CHAIN( R_SHIFT, D(10), ']' )); 													// O - AN/APQ-159 Radar Elevation Antenna Tilt Control - CW/Up
	// CHB
	MapKeyIO(&Throttle, CHB, 	brightness_down,																// I - brightness down for reticle/NVG
							 	CHAIN( R_SHIFT, D(10), '[' )); 													// O - AN/APQ-159 Radar Elevation Antenna Tilt Control - CCW/Down

	// Pinky Switch (exterior lighting)
	// PSF
	MapKeyIO(&Throttle, PSF, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) ), 							//     LED4 ON
							 	CHAIN( extlight_full, D(), 														// O - extlight_full
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) )); 							//     LED4 ON
	MapKeyRIO(&Throttle, PSF, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) ),							//     LED4 OFF
							  	CHAIN( extlight_fulltoform, D(), 												// O - extlight_fulltoform
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) )); 							//     LED4 OFF
	// PSB		
	MapKeyIO(&Throttle, PSB, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) ), 							//     LED4 ON
							 	CHAIN( extlight_covert, D(), 													// O - extlight_covert
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) )); 							//     LED4 ON
	MapKeyRIO(&Throttle, PSB, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) ),							//     LED4 OFF
							  	CHAIN( extlight_covtoform, D(), 												// O - extlight_covtoform
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) )); 							//     LED4 OFF

	// LDGH
	MapKeyIOUMD(&Throttle, LDGH, 0, 																			// IU - 
								CHAIN( DOWN+R_ALT, D(10), PULSE+USB[0x38], D(), UP+R_ALT ),						// OU - Master Caution Button
								0, 																				// IM - 
								CHAIN( DOWN+R_ALT, D(10), PULSE+USB[0x38], D(), UP+R_ALT ),						// OM - Master Caution Button
								0, 																				// ID - 
								CHAIN( DOWN+R_ALT, D(10), PULSE+USB[0x38], D(), UP+R_ALT ));					// OD - Master Caution Button

	// Flaps Switch
	// FLAPU
	MapKey(&Throttle, FLAPU,  	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'f', D(), UP+L_SHIFT ));						// Flap Switch - UP
	// FLAPM
	MapKey(&Throttle, FLAPM, 	CHAIN( DOWN+L_CTL, D(10), PULSE+'f', D(), UP+L_CTL ));							// Flap Switch - FIXED
	// FLAPD	
	MapKey(&Throttle, FLAPD,  	PULSE+'f' );																	// Flap Switch - AUTO


	// Engine Operation
	// EOLIGN
	MapKeyIO(&Throttle, EOLIGN,	SEQ( CHAIN( DOWN+R_CTL+R_SHIFT, D(10), PULSE+'b', D(), UP+R_CTL+R_SHIFT ),		// I - Battery Switch - BATT/OFF
									 CHAIN( DOWN+R_CTL+R_SHIFT, D(10), PULSE+'h', D(), UP+R_CTL+R_SHIFT, D(),	//     Left Generator Switch - Up
											DOWN+R_CTL+R_SHIFT, D(10), PULSE+'j', D(), UP+R_CTL+R_SHIFT),		//     Right Generator Switch - Up
									 CHAIN( DOWN+R_CTL+R_SHIFT, D(10), PULSE+'y', D(), UP+R_CTL+R_SHIFT, D(),	//     Left Boost Pump Switch - ON/OFF
											DOWN+R_CTL+R_SHIFT, D(10), PULSE+'i', D(), UP+R_CTL+R_SHIFT)),		//     Right Boost Pump Switch - ON/OFF
								SEQ( CHAIN( L_CTL+L_SHIFT, D(10), 'c' ),										// O - Left Engine Start Button
									 CHAIN( DOWN+L_SHIFT, D(10), PULSE+HOME, D(), UP+L_SHIFT )));				//	   Throttle Left - IDLE

	// EOLMOTOR
	MapKeyIO(&Throttle, EOLMOTOR, 0,																			// I - 
								groundcrewstartup); 															// O - Ground Crew Start-up

	// EORIGN
	MapKeyIO(&Throttle, EORIGN, 0,																				// I - 
								SEQ( CHAIN( L_CTL+L_SHIFT, D(10), 'v' ),										// O - Right Engine Start Button
									 CHAIN( DOWN+R_SHIFT, D(10), PULSE+HOME, D(), UP+R_SHIFT )));				//     Throttle Right - IDLE

	// Engine Override
	// EFLNORM	
	MapKeyIO(&Throttle, EFLNORM, 	0,																			// I - 
									0 );																		// O - (Front seat)
	// EFLOVER
	MapKeyIO(&Throttle, EFLOVER, 	DX22,																		// I - Aileron Limiter (Hold to turn off)
									0 );																		// O - (Back seat)
	// EFRNORM
	MapKeyIOUMD(&Throttle, EFRNORM, 0,																			// IU - 
								0,																				// OU - 
								CHAIN( PULSE+'p', D(100), DOWN+'p', D(500), UP+'p', PULSE+'p' ),				// IM - Cut Drag Chute
								0,																				// OM - (Raise tail hook)
								0,																				// ID - 
								0 );																			// OD - 
	// EFROVER
	MapKeyIOUMD(&Throttle, EFROVER, 0,																			// IU - 
								0,																				// OU - 
								PULSE+'p',																		// IM - Deploy Drag Chute
								CHAIN( DOWN+'h', D(100), UP+'h' ),												// OM - Deploy Tail Hook
								0,																				// ID - 
								0 );																			// OD - 


	// U LAYER - Air-to-Air Mode
	// BSF - LED1 ON/OFF
	MapKey(&Throttle, BSF, 		CHAIN( DOWN+L_SHIFT+R_SHIFT, D(10), PULSE+'a', D(), UP+L_SHIFT+R_SHIFT, D(100),	// Guns, Missile and Camera Switch Cover - OPEN
									   DOWN+R_SHIFT, D(10), PULSE+'a', D(), UP+R_SHIFT,	D(),					// Guns, Missile and Camera Switch - GUNS MSL & CAMR
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1) )); 							// LED1 ON for U layer
	MapKeyR(&Throttle, BSF, 	CHAIN( DOWN+R_CTL, D(10), PULSE+'a', D(), UP+R_CTL,	D(100),						// Guns, Missile and Camera Switch - OFF
									   DOWN+L_SHIFT+R_CTL, D(10), PULSE+'a', D(), UP+L_SHIFT+R_CTL, D(),		// Guns, Missile and Camera Switch Cover - CLOSE
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1) )); 							// LED1 OFF for U layer

	// M LAYER - Navigation Mode
	// BSM - LED2 ON/OFF
	MapKey(&Throttle, BSM, 		CHAIN( D(200), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2) )); 					// LED2 ON for M layer
	MapKeyR(&Throttle, BSM, 	LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2)); 									// LED2 OFF for M layer

	// D LAYER - Air-to-Ground Mode
	// BSB - LED3 ON/OFF
	MapKey(&Throttle, BSB, 		CHAIN( 0, LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3) )); 						// A-G mode on, LED3 ON for D layer
	MapKeyR(&Throttle, BSB, 	CHAIN( 0, LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3) )); 						// A-G mode off, LED3 OFF for D layer



}


// -------------------- AFTERBURNER DETENT --------------------

int afterburnerdetent(int x)
{
	if (x == 1) {		// Activate detent
		SetCustomCurve(&Throttle, THR_LEFT, LIST(0,0, 25,25, 50,50, AB,AB, 100,AB));
		SetCustomCurve(&Throttle, THR_RIGHT, LIST(0,0, 25,25, 50,50, AB,AB, 100,AB));			
	}
	else {				// Throttle back to full reach
		SetSCurve(&Throttle, THR_LEFT, 0, 0, 0, 0, 0);
		SetSCurve(&Throttle, THR_RIGHT, 0, 0, 0, 0, 0);
	}
}


// -------------------- EVENTHANDLE --------------------

int EventHandle(int type, alias o, int x)
{
	if ((&o == &Throttle) & (x == THR_LEFT)) {									// Detect left throttle position for afterburner detent
		if (afterburnerdetent_present & afterburnerdetent_lifted) {				// If afterburnerdetent present and detent is lifted
			if (Throttle[THR_LEFT] < (100-AB)*(2*AMAX)/100) {					//   If left throttle below afterburner detent value of AB%
				afterburnerdetent(1);											//     Re-engage detent
				afterburnerdetent_lifted = 0;									//     Detent is no longer lifted
			}
		} 
	}
	DefaultMapping(&o, x);
}
