// DCS F-4E Phantom Thrustmaster Warthog Script by Astro
// version 1, May 2024


// -------------------- INCLUDE -----------------------------------------------

include "target.tmh"
include "DCS_F-4E_Phantom_PILOT.tmc"						// all PILOT controls
include "DCS_F-4E_Phantom_WSO.tmc"							// all WSO controls
include "DCS_F-4E_Phantom_JESTER.tmc"						// all JESTER controls
include "DCS_F-4E_Phantom_macros.ttm"						// definitions
include "DCS_Fighter_Common.tmc"							// all dcs fighter COMMON controls




// -------------------- INITIALISE ---------------------------------------------

int autopilot;
int extlight_full;			
int extlight_posdim;	
int extlight_position;
int extlight_formation;		
int extlight_covert;		
int extlight_flashsteady;
int speedbrakes_open;
int speedbrakes_close;
int groundcrewstartup;
int jettison_stores;

int steercmdlist, index_stcmd = 0;							// (start with second element after increment, element 0 is first element in list)
int missilecwlist, index_mslcw = 0;							// (start in off position, element 0 is first element in list)
int radarrangelist, index_range = 2;						// (current is middle of five (assumption 100 nm), element 2, element 0 is first element in list)
int radarelevlist, index_elev = 2;							// (current is middle of five, element 2, element 0 is first element in list)
int lantirn_q_stptlist;

int	JSTR_rdr_off;		// a long, 2, 1, w
int	JSTR_rdr_on;		// a long, 2, 1, e, w

int	JSTR_rdr_stby;			// a long, 2, 1, e, w
int	JSTR_rdr_active;		// a long, 2, 1, w
int	JSTR_rdr_autofocus_on;		// a long, 2, 1, 2x e, w
int	JSTR_rdr_autofocus_off;		// a long, 2, 1, 3x e, w
int	JSTR_rdr_iff;			// a long, 2, 2

int	JSTR_rdr_range_25n;
int	JSTR_rdr_range_25w;
int	JSTR_rdr_range_50n;
int	JSTR_rdr_range_50w;

int	JSTR_rwr_norm;
int	JSTR_rwr_ai;

int JSTR_nav_wp_next;		// a, 4, 1, w
int	JSTR_nav_wp1;			// a, 4, 1, e, w

int	JSTR_startup;
int	JSTR_loudclear;

int	JSTR_ins_fine;
int	JSTR_ins_wpn;

int	JSTR_ins_align;				//	a, 6, 5   start alignment
int	JSTR_jammer_active;			// a, 5, 5, e, w
int	JSTR_jammer_stby;			// a, 5, 5, w

int JSTR_taperecorder;

int JSTR_menu;					// a 
int JSTR_menu_right;			// e
int JSTR_menu_left;				// q 
int JSTR_menu_select;			// w
int JSTR_menu_main;				// RCtrl-w

int JSTR_context_short;
int JSTR_context_long;
int JSTR_context_double;

char LTRN_mode = 0;

int JSTR_rdr_offon;
int JSTR_rwr_ai_norm;
int JSTR_WHDN_startup;


define AB 69											// detent position at AB% of full throttle reach




// -------------------- MAIN ---------------------------------------------

int main()
{
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&JoystickF18, MODE_EXCLUDED);
	Configure(&A320Pilot, MODE_EXCLUDED);
	Configure(&A320Copilot, MODE_EXCLUDED);
	Configure(&TCAQuadrant12, MODE_EXCLUDED);
	Configure(&TCAQuadrant34, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&T16000L, MODE_EXCLUDED);
	//Configure(&LMFD, MODE_EXCLUDED);
	Configure(&RMFD, MODE_EXCLUDED);
	Configure(&TFRPRudder, MODE_EXCLUDED);
	Configure(&TWCSThrottle, MODE_EXCLUDED);
	Configure(&TFRPHARudder, MODE_EXCLUDED);
	
	if(Init(&EventHandle)) return 1;
	
	SetKBRate(40, 50);									// (a < b) a = pulse duration, b = delay duration
	SetKBLayout(KB_ENG);
	
	// -------------------- IOUMD Buttons -------------------------------------
	
	SetShiftButton(&Joystick, S4, &Throttle, BSF, BSB, 0);
	

	// -------------------- LISTS ---------------------------------------------
	// List items are defined in DCS_F-4E_Phantom_macros.ttm
	
	
	// Steer CMD select
	steercmdlist 	= SEQ( Steer_CMD_TACAN,
						   Steer_CMD_Destination,
						   Steer_CMD_AWLPCD,
						   Steer_CMD_VEC,
						   Steer_CMD_MAN );

	// Radar Missile CW select
	missilecwlist 	= SEQ( Missile_CW_Off,
						   Missile_CW_Stby,
						   Missile_CW_On );

	// Radar range select
	radarrangelist 	= SEQ( JSTR_rdr_range_25n_list,
						   JSTR_rdr_range_25w_list,
						   JSTR_rdr_range_50n_list,
						   JSTR_rdr_range_50w_list );

	// Radar elevation select
	radarelevlist 	= SEQ( JSTR_rdr_elev_low,
						   JSTR_rdr_elev_lowmid,
						   JSTR_rdr_elev_middle,
						   JSTR_rdr_elev_highmid,
						   JSTR_rdr_elev_high );



	// -------------------- FUNCTIONS ---------------------------------------------
					
	// Autopilot function
	autopilot = SEQ( CHAIN( DOWN+L_ALT+L_SHIFT, D(10), PULSE+'a', D(), UP+L_ALT+L_SHIFT, D(200),						// Autopilot on
							EXEC( "autopilot_mode();" )),																// Set autopilot mode
					 CHAIN( DOWN+L_ALT+L_CTL, D(10), PULSE+'a', D(), UP+L_ALT+L_CTL ));									// Autopilot off
	
	// Exterior Lighting - Full
	extlight_full = CHAIN( DOWN+L_SHIFT+R_SHIFT, D(10), PULSE+'l', D(), UP+L_SHIFT+R_SHIFT, D(200),						// Fus & Anti-Col Lights - Bright
						   DOWN+L_CTL+R_SHIFT, D(10), PULSE+'l', D(), UP+L_CTL+R_SHIFT, D(200),							// Wing-Position & Join-Up Lights - Bright
						   DOWN+L_ALT+R_SHIFT, D(10), PULSE+'l', D(), UP+L_ALT+R_SHIFT );								// Tail-Position Lights - Bright
						   
	// Exterior Lighting - Position Dim
	extlight_posdim = CHAIN( DOWN+L_SHIFT+R_CTL, D(10), PULSE+'l', D(), UP+L_SHIFT+R_CTL, D(200),						// Fus & Anti-Col Lights - Off
							 DOWN+L_CTL+L_ALT, D(10), PULSE+'l', D(), UP+L_CTL+L_ALT, D(200),							// Wing-Position & Join-Up Lights - Dim
							 DOWN+L_ALT+L_SHIFT, D(10), PULSE+'l', D(), UP+L_ALT+L_SHIFT );								// Tail-Position Lights - Dim

	// Exterior Lighting - Position
	extlight_position = CHAIN( DOWN+L_SHIFT+R_CTL, D(10), PULSE+'l', D(), UP+L_SHIFT+R_CTL, D(200),						// Fus & Anti-Col Lights - Off
							   DOWN+L_CTL+R_SHIFT, D(10), PULSE+'l', D(), UP+L_CTL+R_SHIFT, D(200),						// Wing-Position & Join-Up Lights - Bright
							   DOWN+L_ALT+R_CTL, D(10), PULSE+'l', D(), UP+L_ALT+R_CTL );								// Tail-Position Lights - Off
						
	// Exterior Lighting - Covert
	extlight_covert = CHAIN( DOWN+L_SHIFT+R_CTL, D(10), PULSE+'l', D(), UP+L_SHIFT+R_CTL, D(200),						// Fus & Anti-Col Lights - Off
							 DOWN+L_CTL+R_CTL, D(10), PULSE+'l', D(), UP+L_CTL+R_CTL, D(200),							// Wing-Position & Join-Up Lights - Off
							 DOWN+L_ALT+R_CTL, D(10), PULSE+'l', D(), UP+L_ALT+R_CTL );									// Tail-Position Lights - Off

	// Exterior Lighting - Flash/Steady
	extlight_flashsteady = SEQ ( CHAIN( DOWN+R_WIN+R_SHIFT, D(10), PULSE+'l', D(), UP+R_WIN+R_SHIFT ),					// Light Flasher Mode - Flash
								 CHAIN( DOWN+R_WIN+R_CTL, D(10), PULSE+'l', D(), UP+R_WIN+R_CTL ));						// Light Flasher Mode - Steady



	// Ground Crew Start-up
	groundcrewstartup = SEQ( CHAIN( DOWN+R_CTL, D(10), PULSE+'1', D(), UP+R_CTL, D(5000), 							 	// Crew Chief Command: Wheel Chocks > Place
									DOWN+R_CTL, D(10), PULSE+'3', D(), UP+R_CTL ),										// Crew Chief Command: External Power > Connect
							 CHAIN(	DOWN+R_CTL, D(10), PULSE+'0', D(), UP+R_CTL, D(7000), 								// Crew Chief Command: Comms Check
							 		DOWN+R_CTL, D(10), PULSE+'6', D(), UP+R_CTL, D(15000), 								// Crew Chief Command: Air Source > Connect Right Engine
									DOWN+R_CTL, D(10), PULSE+'7', D(), UP+R_CTL, D(50000), 								// Crew Chief Command: Air Source > Start Flow
									DOWN+R_CTL, D(10), PULSE+'8', D(), UP+R_CTL ), 										// Crew Chief Command: Air Source > Stop Flow
							 CHAIN(	DOWN+R_CTL, D(10), PULSE+'5', D(), UP+R_CTL, D(15000), 								// Crew Chief Command: Air Source > Connect Left Engine
									DOWN+R_CTL, D(10), PULSE+'7', D(), UP+R_CTL, D(50000), 								// Crew Chief Command: Air Source > Start Flow
									DOWN+R_CTL, D(10), PULSE+'8', D(), UP+R_CTL, D(10000), 								// Crew Chief Command: Air Source > Stop Flow
									DOWN+R_CTL, D(10), PULSE+'9', D(), UP+R_CTL, D(20000), 								// Crew Chief Command: Air Source > Disconnect
									DOWN+R_CTL, D(10), PULSE+'4', D(), UP+R_CTL ), 		 								// Crew Chief Command: External Power > Disconnect
							 CHAIN( DOWN+R_CTL, D(10), PULSE+'2', D(), UP+R_CTL ));										// Crew Chief Command: Wheel Chocks > Remove


	// Air-to-Air Refuelling
																														// Master Arm Off
																														// RIO set WCS Switch - STBY
																														// Refuel Probe to ALL EXTD or FUS EXTD
																														// Fuel Dump Switch Off
																														// Air Source to L ENG
																														// Wing Sweep to Bomb (?)

	// Speedbrake functions
	speedbrakes_open  = PULSE+'b'; 																						// speedbrake extend

	speedbrakes_close = CHAIN( D(100), DOWN+L_CTL, D(10), PULSE+'b', D(), UP+L_CTL );									// speedbrake fully retract

	
	// Jettison Stores function
	jettison_stores = CHAIN( DOWN+L_CTL+L_SHIFT, D(10), PULSE+'j', D(), UP+L_CTL+L_SHIFT, D(300),						// Jettison Selector - Stores
							 DOWN+L_CTL, D(10), DOWN+'j', D(700), UP+'j', D(), UP+L_CTL, D(300),						// Jettison Stores
							 DOWN+L_CTL+L_ALT, D(10), PULSE+'j', D(), UP+L_CTL+L_ALT );									// Jettison Selector - Off



	// JESTER calls --------------------

	// Radar
	JSTR_rdr_off			= CHAIN( DOWN+L_CTL+R_CTL, D(10), PULSE+'0', D(), UP+L_CTL+R_CTL );
	JSTR_rdr_on				= CHAIN( DOWN+L_CTL+R_CTL, D(10), PULSE+'1', D(), UP+L_CTL+R_CTL );
	JSTR_rdr_iff			= CHAIN( DOWN+L_CTL+R_CTL, D(10), PULSE+'7', D(), UP+L_CTL+R_CTL );
	// Radar - Range
	JSTR_rdr_range_25n		= CHAIN( DOWN+L_CTL+L_ALT, D(10), PULSE+'1', D(), UP+L_CTL+L_ALT );
	JSTR_rdr_range_25w		= CHAIN( DOWN+L_CTL+L_ALT, D(10), PULSE+'2', D(), UP+L_CTL+L_ALT );
	JSTR_rdr_range_50n		= CHAIN( DOWN+L_CTL+L_ALT, D(10), PULSE+'3', D(), UP+L_CTL+L_ALT );
	JSTR_rdr_range_50w		= CHAIN( DOWN+L_CTL+L_ALT, D(10), PULSE+'4', D(), UP+L_CTL+L_ALT );
	// RWR
	JSTR_rwr_norm			= CHAIN( PULSE+'a', D(200), PULSE+'a', D(200), 
									 DOWN+L_CTL, D(10), PULSE+'6', D(), UP+L_CTL, D(200), 
									 DOWN+L_CTL, D(10), PULSE+'6', D(), UP+L_CTL, D(200), 
									 DOWN+L_CTL, D(10), PULSE+'1', D(), UP+L_CTL );
	JSTR_rwr_ai				= CHAIN( PULSE+'a', D(200), PULSE+'a', D(200), 
									 DOWN+L_CTL, D(10), PULSE+'6', D(), UP+L_CTL, D(200), 
									 DOWN+L_CTL, D(10), PULSE+'6', D(), UP+L_CTL, D(200), 
									 DOWN+L_CTL, D(10), PULSE+'2', D(), UP+L_CTL );
	// Navigation
	JSTR_nav_wp_next		= CHAIN( PULSE+'a', D(200),
									 DOWN+L_CTL, D(10), PULSE+'4', D(), UP+L_CTL, D(200), 
									 DOWN+L_CTL, D(10), PULSE+'1', D(), UP+L_CTL, D(200), 
									 PULSE+'w' );
	JSTR_nav_wp1			= CHAIN( PULSE+'a', D(200),
									 DOWN+L_CTL, D(10), PULSE+'4', D(), UP+L_CTL, D(200), 
									 DOWN+L_CTL, D(10), PULSE+'1', D(), UP+L_CTL, D(200), 
									 PULSE+'e', D(200), 
									 PULSE+'w' );
	// Start-up
	JSTR_startup			= CHAIN( PULSE+'a', D(200), DOWN+L_CTL, D(10), PULSE+'3', D(), UP+L_CTL );
	JSTR_loudclear			= CHAIN( PULSE+'a', D(200), DOWN+L_CTL, D(10), PULSE+'4', D(), UP+L_CTL );
	JSTR_ins_fine			= CHAIN( PULSE+'a', D(200), DOWN+L_CTL, D(10), PULSE+'4', D(), UP+L_CTL );
	JSTR_ins_wpn			= CHAIN( PULSE+'a', D(200), DOWN+L_CTL, D(10), PULSE+'5', D(), UP+L_CTL );
	// General
	JSTR_jammer_active		= CHAIN( PULSE+'a', D(200),
									 DOWN+L_CTL, D(10), PULSE+'5', D(), UP+L_CTL, D(200), 
									 DOWN+L_CTL, D(10), PULSE+'5', D(), UP+L_CTL, D(200), 
									 PULSE+'e', D(200), 
									 PULSE+'w' );
	JSTR_jammer_stby		= CHAIN( PULSE+'a', D(200),
									 DOWN+L_CTL, D(10), PULSE+'5', D(), UP+L_CTL, D(200), 
									 DOWN+L_CTL, D(10), PULSE+'5', D(), UP+L_CTL, D(200), 
									 PULSE+'w' );

	JSTR_menu				= 'a';
	JSTR_menu_right			= PULSE+'e';
	JSTR_menu_left			= PULSE+'q';
	JSTR_menu_select		= PULSE+'w';
	JSTR_menu_main			= CHAIN( DOWN+R_CTL, D(10), PULSE+'w', D(), UP+R_CTL );

	JSTR_context_short		= PULSE+'v';
	JSTR_context_long		= CHAIN( DOWN+'v', D(500), UP+'v');
	JSTR_context_double		= CHAIN( PULSE+'v', D(200), PULSE+'v');



	// JSTR functions ----------- define sequences here, are remembered when switching controls
	JSTR_taperecorder		= SEQ( CHAIN( DOWN+L_CTL+L_ALT, D(10), PULSE+'7', D(), UP+L_CTL+L_ALT ),			// Jester Command: Systems > AVTR > Standby
								   CHAIN( DOWN+L_CTL+L_ALT, D(10), PULSE+'6', D(), UP+L_CTL+L_ALT ));			// Jester Command: Systems > AVTR > Record
	
	JSTR_rdr_offon			= SEQ( JSTR_rdr_off,										// Radar - Silent/Active
								   JSTR_rdr_on );
	JSTR_rwr_ai_norm		= SEQ( JSTR_rwr_ai,											// RWR - Airborne Interceptor / Normal
								   JSTR_rwr_norm );
	JSTR_WHDN_startup		= SEQ( JSTR_startup,										// Start-up/Loud&Clear/INS Fine
								   JSTR_loudclear,
								   JSTR_ins_fine );

	
	// -------------------- INITIAL MODE VALUES ---------------------------------



	// -------------------- COMMON --------------------------------------------
					
	dcs_fighter_common();								// load dcs COMMON controls
	dcs_fighter_mfd();									// load dcs MFD controls (in DCS_Fighter_Common.tmc)
														// before aircraft specific, to allow for overwriting of common controls when necessary

	// -------------------- LEFT MFD

	MapKeyIO(&LMFD, OSB03, 		CHAIN( DOWN+R_WIN+R_SHIFT, D(10), PULSE+'3', D(), UP+R_WIN+R_SHIFT ), 					// I - Right MFD OSB 03
								TEMPO( CHAIN( DOWN+R_WIN+L_SHIFT, D(10), PULSE+'3', D(), UP+R_WIN+L_SHIFT ),			// O - Left MFD OSB 03
									   CHAIN( DOWN+R_WIN+L_SHIFT, D(10), PULSE+'p', D(), UP+R_WIN+L_SHIFT ), 500 ));	//     [long] Left MFD OSB 03 - Arm Gun



	// -------------------- CONTROLS ---------------------------------------------
	
	dcs_f4e_pilot_controls();							// PILOT controls (loaded first, for WSO switch after scripted loaded)


	// Engine Override
	// EFLNORM	
	MapKeyIO(&Throttle, EFLNORM, 	CHAIN( 0, D(), 													// I - Emergency Quick Release Lever - Release
										   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5) ),			// 	   LED5 OFF for MANUAL Override
									CHAIN( PULSE+'1', D(100),										// O - Switch to PILOT cockpit
										   EXEC( "dcs_f4e_pilot_controls();" )));					//     load PILOT controls
	// EFLOVER
	MapKeyIO(&Throttle, EFLOVER, 	CHAIN( DX22, D(),												// I - Emergency Quick Release Lever - Press
										   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5) ),			// 	   LED5 ON for MANUAL Override
									CHAIN( PULSE+'2', D(100),										// O - Switch to WSO cockpit
										   EXEC( "dcs_f4e_wso_controls();" )));						//     load WSO controls
	MapKeyRIO(&Throttle, EFLOVER, 	0,																// I - 
									0 );															// O - 
								


}	// end main()	================================================================






// -------------------- AUTOPILOT MODE ---------------------------------------------

int autopilot_mode()
{
	if (Throttle[APPAT]) ActKey(KEYON+PULSE+L_ALT+L_CTL+'h');							// ALT Hold - Disengage
	else if (Throttle[APALT]) ActKey(KEYON+PULSE+L_ALT+L_CTL+'h');						// ALT Hold - Disengage
	else ActKey(KEYON+PULSE+L_ALT+L_SHIFT+'h');											// ALT Hold - Engage
}



// -------------------- TCS MENU ---------------------------------------------

//int checktcsmenu()
//{
//	if (!tcs_menu_on) {
//		ActKey(KEYON+PULSE+JSTR_TCS_menu);												// Turn on TCS menu (when not already on)
//		tcs_menu_on = 1;
//		LTRN_mode = 1;																	// LTRN_mode ON
//		dcs_f4e_jester_lantirn_controls();												// Load JESTER LANTIRN controls
//	}
//}



// -------------------- AFTERBURNER DETENT ------------------------------------------

int afterburnerdetent(int x)
{
	if (x == 1) {		// Activate detent
		SetCustomCurve(&Throttle, THR_LEFT, LIST(0,0, 25,25, 50,50, AB,AB, 100,AB));
		SetCustomCurve(&Throttle, THR_RIGHT, LIST(0,0, 25,25, 50,50, AB,AB, 100,AB));			
	}
	else {				// Throttle back to full reach
		SetSCurve(&Throttle, THR_LEFT, 0, 0, 0, 0, 0);
		SetSCurve(&Throttle, THR_RIGHT, 0, 0, 0, 0, 0);
	}
}


// -------------------- EVENTHANDLE -------------------------------------------------

int EventHandle(int type, alias o, int x)
{
	if ((&o == &Throttle) & (x == THR_LEFT)) {											// Detect left throttle position for afterburner detent
		if (afterburnerdetent_present & afterburnerdetent_lifted) {						// If afterburnerdetent present and detent is lifted
			if (Throttle[THR_LEFT] < (100-AB)*(2*AMAX)/100) {							//   If left throttle below afterburner detent value of AB%
				afterburnerdetent(1);													//     Re-engage detent
				afterburnerdetent_lifted = 0;											//     Detent is no longer lifted
			}
		} 
	}
	DefaultMapping(&o, x);
}
