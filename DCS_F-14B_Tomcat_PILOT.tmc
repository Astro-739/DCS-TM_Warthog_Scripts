// PILOT file for DCS_F-14B_Tomcat.tmc  by Astro
// TARGET version 3.0.24.618
// version 2.0, Feb 2025




// ---------------------------------- F-14B PILOT CONTROLS ----------------------------------------

int dcs_f14_pilot_controls()
{

	// ---------------------- FLIGHT STICK --------------------------

	// -- DCS_Fighter_Common ---------
	// TG - Gun Trigger
	// S1 - Nosewheel Steering Button
	// H1 - Trim Switch
	// JOYX
	// JOYY
	// -------------------------------


	// JSTR layer
	// Expand FOV Button - S3
	MapKey(&AVA_F16, S3,  	EXEC( "if(LTRN_mode) dcs_f14_jester_lantirn_controls();"		// Switch to JESTER LANTIRN controls (LTRN_mode ON)
								  "else dcs_f14_jester_controls();" ));						// Switch to JESTER controls (LTRN_mode OFF)
	MapKeyR(&AVA_F16, S3,  	EXEC( "dcs_fighter_common_switch();" 							// Switch back to COMMON,
								  "dcs_f14_pilot_controls_switch();" ));					//   and PILOT controls


	// Weapon Release Button
	// S2
	MapKeyIO(&AVA_F16, S2,  SEQ( CHAIN( L_SHIFT+L_CTL, D(10), '9' ),												// I - Emergency All Jettison Button Cover - OPEN
								 CHAIN( L_SHIFT+L_CTL, D(10), '0' )),												//	   Emergency All Jettison Button
							DX2 );																					// O - weapon release


 	// Countermeasure Management Switch
	// H4U	
	MapKeyIO(&AVA_F16, H4U, 	CHAIN( DOWN+R_SHIFT+L_SHIFT, D(10), PULSE+'t', D(), UP+R_SHIFT+L_SHIFT ),				// I - Target designate up / VSL HI
							 	CHAIN( L_SHIFT, D(10), 'd' ));															// O - DLC Thumbwheel Forward
	// H4D
	MapKeyIO(&AVA_F16, H4D, 	CHAIN( DOWN+R_SHIFT+L_CTL, D(10), PULSE+'t', D(), UP+R_SHIFT+L_CTL ), 					// I - Target designate down / VSL LO
							 	CHAIN( L_CTL, D(10), 'd' ));															// O - DLC Thumbwheel Aft
	// H4R
	MapKeyIO(&AVA_F16, H4R, 	CHAIN( DOWN+R_SHIFT+L_ALT, D(10), PULSE+'t', D(), UP+R_SHIFT+L_ALT ), 					// I - Target designate fwd / PAL
			  				 	0);																						// O - 
	// H4L
	MapKeyIO(&AVA_F16, H4L, 	CHAIN( L_SHIFT+L_CTL, D(10), 't' ), 													// I - PLM button
							 	0); 																					// O - 
	// H4P
	MapKeyIO(&AVA_F16, H4P, 	0, 																						// I - 
							 	CHAIN( DOWN+L_ALT, D(10), PULSE+'d', D(), UP+L_ALT )); 									// O - DLC Toggle / Countermeasure Dispense

	
	
 
	// -------------------- THROTTLE --------------------------------

	// --DCS_Fighter_Common---------
	// Left Throttle Button
	// SPDF/B
	// CHF/B
	// MSU/D/P
	// PSF/B
	// EACON/OFF Landing Gear
	// EOLIGN/OVER
	// EORIGN/OVER
	// EFLNORM/OVER
	// EFRNORM/OVER
	// SC
	// APUON/OFF
	// RDRNRM/DIS Canopy
	// IDLELON/IDLERON
	// THR_LEFT
	// THR_RIGHT
	// THR_FC
	// SCX
	// SCY
	// -----------------------------



	// Autopilot
	// APENG	
	MapKeyIO(&Throttle, APENG, 	CHAIN( DOWN+L_CTL, D(10), PULSE+'t', D(), UP+L_CTL ),								// Toggle Auto Throttle
								autopilot );																		// Autopilot on/off
	// APDIS
	MapKey(&Throttle, APDIS, 	0 ); 																				// see autopilot_mode()
	// APPAT
	MapKey(&Throttle, APPAT, 	0 );																				// see autopilot_mode()
	// APAH
	MapKey(&Throttle, APAH, 	0 );																				// see autopilot_mode()
	// APALT
	MapKey(&Throttle, APALT, 	0 );																				// see autopilot_mode()



	// Pinky Switch (exterior lighting)
	// PSF
	MapKeyIO(&Throttle, PSF, 	CHAIN( extlight_posdim, D(), 													// I - extlight_posdim
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) ), 							//     LED4 ON
							 	CHAIN( extlight_full, D(), 														// O - extlight_full
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) )); 							//     LED4 ON
	MapKeyRIO(&Throttle, PSF, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) ),							//     LED4 OFF
							  	CHAIN( extlight_formation, D(), 												// O - extlight_formation
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) )); 							//     LED4 OFF
	// PSB		
	MapKeyIO(&Throttle, PSB, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) ), 							//     LED4 ON
							 	CHAIN( extlight_covert, D(), 													// O - extlight_covert
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) )); 							//     LED4 ON
	MapKeyRIO(&Throttle, PSB, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) ),							//     LED4 OFF
							  	CHAIN( extlight_formation, D(), 												// O - extlight_formation
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) )); 							//     LED4 OFF


	// Flaps Switch
	// FLAPU
	MapKey(&Throttle, FLAPU,  	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'f', D(), UP+L_SHIFT ));						// Flap Switch - UP
	// FLAPM
	MapKey(&Throttle, FLAPM, 	0);																				// 
	// FLAPD	
	MapKey(&Throttle, FLAPD,  	PULSE+'f');																		// Flap Switch - DOWN

	
	// Engine Operation
	// EOLIGN
	MapKeyIO(&Throttle, EOLIGN,	CHAIN( DOWN+R_SHIFT, D(10), PULSE+'c', D(), UP+R_SHIFT ),						// I - Crank Left Engine
								CHAIN( DOWN+L_SHIFT, D(10), PULSE+HOME, D(), UP+L_SHIFT ));							// O - Throttle Left - IDLE

	// EORIGN
	MapKeyIO(&Throttle, EORIGN, CHAIN( DOWN+R_CTL, D(10), PULSE+'c', D(), UP+R_CTL ),							// I - Crank Right Engine
								CHAIN( DOWN+R_SHIFT, D(10), PULSE+HOME, D(), UP+R_SHIFT ));						// O - Throttle Right - IDLE


	// SC
	MapKeyIO(&Throttle, SC, 	TEMPO( CHAIN( DOWN+R_CTL, D(10), PULSE+INS, D(), UP+R_CTL ),					// I - [short] re-centre IR tracker
									   CHAIN( DOWN+L_SHIFT, D(10), PULSE+'`', D(), UP+L_SHIFT ),				//     [long] discord game overlay
									   500),
								CHAIN( L_SHIFT+L_CTL, D(10), 't' ));											// O - PLM button


	// U LAYER - [O] Air-to-Air Mode
	//			 [I] ACM Mode
	// BSF - LED1 ON/OFF
	MapKeyIO(&Throttle, BSF, 	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'3', D(), UP+L_SHIFT, D(200),							// I - Display mode air to air
									   DOWN+L_SHIFT+R_SHIFT, D(10), PULSE+'a', D(), UP+L_SHIFT+R_SHIFT, D(200),			// 	   Master arm cover open
									   DOWN+R_SHIFT, D(10), PULSE+'a', D(), UP+R_SHIFT,	D(200),							// 	   Master arm on
									   DOWN+R_CTL+L_CTL, D(10), PULSE+'r', D(), UP+R_CTL+L_CTL, D(200),					//     AFCS Roll Stabilisation Off
									   DOWN+L_CTL+R_SHIFT, D(10), PULSE+'w', D(), UP+L_CTL+R_SHIFT, D(100),				//	   Wing Sweep Auto Mode
									   DOWN+R_SHIFT+L_ALT, D(10), PULSE+'c', D(), UP+R_SHIFT+L_ALT, D(),				//	   ACM cover open
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1) ), 									// 	   LED1 ON for U layer
								CHAIN( DOWN+L_SHIFT, D(10), PULSE+'3', D(), UP+L_SHIFT, D(200),							// O - Display mode air to air
									   DOWN+R_CTL+L_CTL, D(10), PULSE+'r', D(), UP+R_CTL+L_CTL, D(200),					//     AFCS Roll Stabilisation Off
									   DOWN+L_CTL+R_SHIFT, D(10), PULSE+'w', D(), UP+L_CTL+R_SHIFT, D(),				//	   Wing Sweep Auto Mode
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1) )); 									// 	   LED1 ON for U layer
	MapKeyRIO(&Throttle, BSF, 	CHAIN( DOWN+R_SHIFT+L_CTL, D(10), PULSE+'c', D(), UP+R_SHIFT+L_CTL, D(200),				// I - ACM cover close
									   DOWN+L_SHIFT, D(10), PULSE+'2', D(), UP+L_SHIFT, D(200),							// 	   Display mode cruise
									   DOWN+R_CTL+L_SHIFT, D(10), PULSE+'r', D(), UP+R_CTL+L_SHIFT, D(),				//	   AFCS Roll Stabilisation On
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1) ), 									// 	   LED1 OFF for U layer 
								CHAIN( DOWN+L_SHIFT, D(10), PULSE+'2', D(), UP+L_SHIFT, D(200),							// O - Display mode cruise
									   DOWN+R_CTL+L_SHIFT, D(10), PULSE+'r', D(), UP+R_CTL+L_SHIFT, D(),				//	   AFCS Roll Stabilisation On
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1) )); 									// 	   LED1 OFF for U layer

	// M LAYER - Navigation Mode
	// BSM - LED2 ON/OFF
	MapKey(&Throttle, BSM, 		LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)); 											// LED2 ON for M layer
	MapKeyR(&Throttle, BSM, 	LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2)); 											// LED2 OFF for M layer

	// D LAYER - Air-to-Ground Mode
	// BSB - LED3 ON/OFF
	MapKeyIO(&Throttle, BSB, 	CHAIN( EXEC( "Throttle[BSB] = 0; DefEventHandler(EV_HID_INPUT_DATA, &Throttle, BSB);"),	// I - Temporary virtual M layer (reset D layer)
									   EXEC( "CAR_mode = 1;"															// 	   Set CAR_mode ON
											 "printf(\"CAR_mode = 1\\xa\");" ),											// 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5) ),									//     LED5 ON
								CHAIN( DOWN+L_SHIFT, D(10), PULSE+'4', D(), UP+L_SHIFT, D(100),							// O - Display mode air to ground
									   EXEC( "if((index_stpt_aa)%3 == 2) index_stpt_ag = 4;"							// 	   Set correct steerpoint in A-G mode (element 0 is first element in list)
											 "else index_stpt_ag = (index_stpt_aa)%3;" ),								// 
									   EXEC( "if(Joystick[S3]) {"														// 	   If JSTR shift is pressed
											   "LTRN_mode = 1;"															// 	   LTRN_mode ON
											   "printf(\"LTRN_mode = 1\\xa\");"											// 
											   "dcs_f14_jester_lantirn_controls();"										//	   Load JESTER LANTIRN controls
											   "}" ),																	//
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3) )); 									//     A-G mode on, LED3 ON for D layer
	MapKeyRIO(&Throttle, BSB, 	CHAIN( EXEC( "CAR_mode = 0;"															// I - Set CAR_mode OFF
											 "printf(\"CAR_mode = 0\\xa\");" ),											// 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5) ),									//     LED5 OFF
								CHAIN( DOWN+L_SHIFT, D(10), PULSE+'2', D(), UP+L_SHIFT, D(),							// O - Display mode cruise
									   EXEC( "if((index_stpt_ag)%5 > 1) index_stpt_aa = 2;"								// 	   Set correct steerpoint in A-A mode (IP and ST default to WP3, element 0 is first element in list)
											 "else index_stpt_aa = (index_stpt_ag)%5;" ),								//
									   EXEC( "LTRN_mode = 0;"															//     LTRN_mode OFF
											 "printf(\"LTRN_mode = 0\\xa\");" ),										// 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3) ));									// 	   A-G mode off, LED3 OFF for D layer

	
	
	// ---------- Also load SWITCH part of PILOT controls -----------
	
	dcs_f14_pilot_controls_switch();																					// controls to be switched back after JESTER use



}	// ====  end dcs_f14_pilot_controls()  ========================================================




// -----------------  PILOT SWITCH CONTROLS to be switched back after JESTER use ------------------

int dcs_f14_pilot_controls_switch()
{


	// Target Management Switch
	// H2U
	MapKeyIO(&AVA_F16, H2U, 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+'w', D(), UP+R_SHIFT ),								// I - Weapon Selector up
								USB[0x55] );																			// O - zoom in  (KP*)
	// H2D
	MapKeyIO(&AVA_F16, H2D, 	CHAIN( DOWN+R_CTL, D(10), PULSE+'w', D(), UP+R_CTL ), 									// I - Weapon Selector down
								USB[0x54] );																			// O - zoom out  (KP\)
	// H2R							
	MapKeyIO(&AVA_F16, H2R, 	CHAIN( DOWN+R_ALT, D(10), PULSE+'w', D(), UP+R_ALT ), 									// I - Weapon Selector press
								CHAIN( L_WIN, D(10), KP6 ));															// O - snap view right
	// H2L
	MapKeyIO(&AVA_F16, H2L, 	0,																						// I -
								CHAIN( DOWN+R_SHIFT, D(10), PULSE+BSP, D(), UP+R_SHIFT, D(),							// O - remove stick
								L_WIN, D(10), KP4 ));																	//     snap view instruments
	MapKeyRIO(&AVA_F16, H2L, 	0,																						// I - 
								CHAIN( D(200), DOWN+R_CTL, D(10), PULSE+BSP, D(), UP+R_CTL ));							// O - place stick


	// Display Management Switch
	// H3U
	MapKeyIO(&AVA_F16, H3U, 	TEMPO( CHAIN( DOWN+R_SHIFT, D(10), PULSE+'k', D(), UP+R_SHIFT ),						// I - kneeboard on/off
									   nightvision, 500 ),																// 	   [long] Night Vision Goggles toggle
								CHAIN( DOWN+L_ALT+R_SHIFT, D(10), PULSE+'v', D(), UP+L_ALT+R_SHIFT ));					// O - VDI Mode Toggle
	// H3D
	MapKeyIO(&AVA_F16, H3D, 	TEMPO( CHAIN( DOWN+R_CTL, D(10), PULSE+'k', D(), UP+R_CTL ),							// I - kneeboard current position mark point
									   flashlight, 500 ),																//	   [long] Flashlight on/off	
								CHAIN( DOWN+L_ALT+R_SHIFT, D(10), PULSE+'h', D(), UP+L_ALT+R_SHIFT ));					// O - HSD Mode Toggle
	// H3R
	MapKeyIO(&AVA_F16, H3R, 	TEMPO( PULSE+']', 																		// I - kneeboard next page
									   CHAIN( DOWN+R_SHIFT+L_SHIFT, D(10), PULSE+']', D(), UP+R_SHIFT+L_SHIFT ), 500 ),	//	   [long] Kneeboard Next Shortcut
								TEMPO( EXEC( "index_stcmd = (index_stcmd+1)%5;"											// O - Steer CMD next
											 "ActKey( KEYON+PULSE+X(steercmdlist, index_stcmd) );" ),					// 		
									   CHAIN( DOWN+L_SHIFT, D(10), PULSE+'7', D(), UP+L_SHIFT ),						// 	   [long] Display mode next
									   500 ));																			//
	// H3L
	MapKeyIO(&AVA_F16, H3L, 	TEMPO( PULSE+'[', 																		// I - kneeboard previous page
									   CHAIN( DOWN+R_SHIFT+L_SHIFT, D(10), PULSE+'[', D(), UP+R_SHIFT+L_SHIFT ), 500 ),	//	   [long] Kneeboard Previous Shortcut
								TEMPO( EXEC( "index_stcmd = (index_stcmd+4)%5;"											// O - Steer CMD previous
											 "ActKey( KEYON+PULSE+X(steercmdlist, index_stcmd) );" ),					// 		
									   CHAIN( DOWN+L_SHIFT, D(10), PULSE+'6', D(), UP+L_SHIFT ),						// 	   [long] Display mode previous
									   500 ));																			//

//								SEQ( CHAIN( DOWN+L_SHIFT, D(10), PULSE+'m', D(), UP+L_SHIFT ),							// IU - Walkman Start
//									 CHAIN( DOWN+L_SHIFT, D(10), PULSE+'n', D(), UP+L_SHIFT )),							//	    Walkman Stop
//								CHAIN( DOWN+L_ALT, D(10), PULSE+'n', D(), UP+L_ALT ),									// IU - Walkman Switch Side
//								CHAIN( DOWN+L_CTL, D(10), PULSE+'m', D(), UP+L_CTL ),									// IU - Walkman Fast Forward
//								CHAIN( DOWN+L_CTL, D(10), PULSE+'n', D(), UP+L_CTL ),									// IU - Walkman Fast Backward



	// Coolie Switch
	// CSU
	MapKeyIOUMD(&Throttle, CSU, CHAIN( DOWN+L_CTL+R_SHIFT, D(10), PULSE+'w', D(), UP+L_CTL+R_SHIFT ), 					// IU - Wing Sweep Auto Mode
								CHAIN( DOWN+L_CTL, D(10), PULSE+'p', D(), UP+L_CTL ), 									// OU - Missile Mode Toggle (boresight/slave)
								CHAIN( DOWN+L_CTL+R_SHIFT, D(10), PULSE+'w', D(), UP+L_CTL+R_SHIFT ), 					// IM - Wing Sweep Auto Mode
								CHAIN( EXEC( "if(CAR_mode) ActKey( PULSE+KEYON+L_CTL+'q' );" )),						// OM - [CAR] Nose strut extend
								CHAIN( DOWN+L_CTL+R_SHIFT, D(10), PULSE+'w', D(), UP+L_CTL+R_SHIFT ),					// ID - Wing Sweep Auto Mode
								JSTR_agwpn_comptgt ); 																	// OD - Set Computer Target Weapons (CCRP)
	// CSD
	MapKeyIOUMD(&Throttle, CSD, CHAIN( DOWN+L_CTL+R_CTL, D(10), PULSE+'w', D(), UP+L_CTL+R_CTL ),	 					// IU - Wing Sweep Bomb Mode
								CHAIN( DOWN+L_ALT, D(10), PULSE+'p', D(), UP+L_ALT, D(200),			 					// OU - Toggle Missile Prep
									   DOWN+L_SHIFT, D(10), PULSE+'p', D(), UP+L_SHIFT, D(200),							//      Toggle SW Cooling
									   DOWN+L_WIN, D(10), PULSE+'p', D(), UP+L_WIN ),									//      Toggle Gun Rate
								CHAIN( DOWN+L_CTL+R_CTL, D(10), PULSE+'w', D(), UP+L_CTL+R_CTL ),	 					// IM - Wing Sweep Bomb Mode
								CHAIN( EXEC( "if(CAR_mode) ActKey( PULSE+KEYON+L_CTL+'a' );" )),						// OM - [CAR] Nose strut kneel
								CHAIN( DOWN+L_CTL+R_CTL, D(10), PULSE+'w', D(), UP+L_CTL+R_CTL ),	 					// ID - Wing Sweep Bomb Mode
								JSTR_agwpn_comppilot );												 					// OD - Set Computer Pilot Weapons (CCIP)
	// CSR
	MapKeyIOUMD(&Throttle, CSR, CHAIN( L_ALT, D(10), 'w' ),																// IU - Wing Sweep Forward
								DX23,																					// OU - CAGE-SEAM button
								CHAIN( L_ALT, D(10), 'w' ),																// IM - Wing Sweep Forward
								TEMPO( 0, PULSE+'m', 500 ),																// OM - [long] Toggle Mirrors
								CHAIN( L_ALT, D(10), 'w' ),																// ID - Wing Sweep Forward
								0);																						// OD - 
	// CSL
	MapKeyIOUMD(&Throttle, CSL, CHAIN( L_SHIFT+R_CTL, D(10), 'w' ),														// IU - Wing Sweep Aft
								0,																						// OU - 
								CHAIN( L_SHIFT+R_CTL, D(10), 'w' ),														// IM - Wing Sweep Aft
								0,																						// OM - 
								CHAIN( L_SHIFT+R_CTL, D(10), 'w' ),														// ID - Wing Sweep Aft
								0);																						// OD - 


} 	// =====  end of dcs_f14_pilot_controls_switch()  =============================================