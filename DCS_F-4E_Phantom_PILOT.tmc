// PILOT file for DCS_F-4E_Phantom.tmc  by Astro
// version 1, May 2024



// -------------------- PILOT CONTROLS -------------------------------------------------

int dcs_f4e_pilot_controls()
{

	// -------------------- FLIGHT STICK -------------------------------------------------

	// -- DCS_Fighter_Common ---------
	// TG - Gun Trigger
	// S1 - Nosewheel Steering Button
	// H1 - Trim Switch
	// JOYX
	// JOYY
	// -------------------------------


	// JSTR layer
	// Expand FOV Button - S3
	MapKey(&Joystick, S3,  		EXEC( "if(LTRN_mode) dcs_f4e_jester_lantirn_controls();"	// Switch to JESTER LANTIRN controls (LTRN_mode ON)
									  "else dcs_f4e_jester_controls();" ));					// Switch to JESTER controls (LTRN_mode OFF)
	MapKeyR(&Joystick, S3,  	EXEC( "dcs_fighter_common_jstr();" 							// Switch back to COMMON,
									  "dcs_f4e_pilot_controls_jstr();" ));					//   and PILOT controls


	// Weapon Release Button
	// S2
	MapKeyIOUMD(&Joystick, S2,  CHAIN( L_CTL, D(10), 'j' ),																// IU - Jettison Button
							    CHAIN( R_ALT, D(10), SPC ),																// OU - weapon release
								CHAIN( L_CTL, D(10), 'j' ),																// IM - Jettison Button
							    0,																					 	// OM - 
							    CHAIN( L_CTL, D(10), 'j' ),																// ID - Jettison Button
							    CHAIN( R_ALT, D(10), SPC ));															// OD - weapon release


 	// Countermeasure Management Switch
	// H4U	
	MapKeyIO(&Joystick, H4U, 	0,																						// I - 
							 	CHAIN( DOWN+L_ALT+L_SHIFT, D(10), PULSE+'q', D(), UP+L_ALT+L_SHIFT ));					// O - Dispense Program - Flares
	// H4D
	MapKeyIO(&Joystick, H4D, 	0,																						// I - 
							 	CHAIN( DOWN+L_ALT+L_CTL, D(10), PULSE+'q', D(), UP+L_ALT+L_CTL ));						// O - Dispense Program - Normal
	// H4R
	MapKeyIO(&Joystick, H4R, 	0,																						// I - 
			  				 	0 );																					// O - 
	// H4L
	MapKeyIO(&Joystick, H4L, 	0,									 													// I - 
							 	0 ); 																					// O - 
	// H4P
	MapKeyIO(&Joystick, H4P, 	0, 																						// I - 
							 	CHAIN( DOWN+L_ALT, D(10), PULSE+'q', D(), UP+L_ALT )); 									// O - Countermeasure Dispense

	
	
 
	// -------------------- THROTTLE -------------------------------------------------

	// --DCS_Fighter_Common---------
	// Left Throttle Button
	// MSU/D/R/L/P
	// EACON/OFF Landing Gear
	// EOLNORM
	// EORNORM/MOTOR
	// SC
	// APUON/OFF
	// LDGH
	// RDRNRM/DIS Canopy
	// IDLELON/IDLERON
	// THR_LEFT
	// THR_RIGHT
	// THR_FC
	// SCX
	// SCY
	// -----------------------------



	// Autopilot
	// APENG	
	MapKeyIO(&Throttle, APENG, 	0,																					// I - 
								autopilot );																		// O - Autopilot on/off
	// APDIS
	MapKey(&Throttle, APDIS, 	0 ); 																				// see autopilot_mode()
	// APPAT
	MapKey(&Throttle, APPAT, 	CHAIN( DOWN+L_ALT+L_CTL, D(10), PULSE+'h', D(), UP+L_ALT+L_CTL ));					// ALT Hold - Disengage
	// APAH
	MapKey(&Throttle, APAH, 	CHAIN( DOWN+L_ALT+L_SHIFT, D(10), PULSE+'h', D(), UP+L_ALT+L_SHIFT ));				// ALT Hold - Engage
	// APALT
	MapKey(&Throttle, APALT, 	CHAIN( DOWN+L_ALT+L_CTL, D(10), PULSE+'h', D(), UP+L_ALT+L_CTL ));					// ALT Hold - Disengage


								
	// China Hat
	// CHF
	MapKeyIO(&Throttle, CHF, 	brightness_up, 																	// I - brightness up for reticle/NVG
							 	CHAIN( L_ALT+R_SHIFT, D(10), '-' )); 											// O - HUD Trim Dec
	// CHB
	MapKeyIO(&Throttle, CHB, 	brightness_down,																// I - brightness down for reticle/NVG
							 	CHAIN( L_ALT+R_SHIFT, D(10), '=' )); 											// O - HUD Trim Inc

	// Pinky Switch (exterior lighting)
	// PSF
	MapKeyIO(&Throttle, PSF, 	CHAIN( extlight_posdim, D(), 													// I - extlight_posdim
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) ), 							//     LED4 ON
							 	CHAIN( extlight_full, D(), 														// O - extlight_full
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) )); 							//     LED4 ON
	MapKeyRIO(&Throttle, PSF, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) ),							//     LED4 OFF
							  	CHAIN( extlight_position, D(), 													// O - extlight_position
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) )); 							//     LED4 OFF
	// PSB		
	MapKeyIO(&Throttle, PSB, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) ), 							//     LED4 ON
							 	CHAIN( extlight_covert, D(), 													// O - extlight_covert
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) )); 							//     LED4 ON
	MapKeyRIO(&Throttle, PSB, 	CHAIN( 0, D(), 																	// I - 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) ),							//     LED4 OFF
							  	CHAIN( extlight_position, D(), 													// O - extlight_position
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) )); 							//     LED4 OFF


	// Flaps Switch
	// FLAPU
	MapKey(&Throttle, FLAPU,  	CHAIN( DOWN+L_CTL+L_SHIFT, D(10), PULSE+'f', D(), UP+L_CTL+L_SHIFT ));			// Flaps/Slats Switch - Norm
	// FLAPM
	MapKey(&Throttle, FLAPM, 	CHAIN( DOWN+L_CTL, D(10), PULSE+'f', D(), UP+L_CTL ));							// Flaps/Slats Switch - Out
	// FLAPD	
	MapKey(&Throttle, FLAPD,  	CHAIN( DOWN+L_CTL+L_ALT, D(10), PULSE+'f', D(), UP+L_CTL+L_ALT ));				// Flaps/Slats Switch - Out&Down

	// Engine Operation
	// EOLIGN
	MapKeyIO(&Throttle, EOLIGN,	0,																				// I - 
								CHAIN( DX11, D(300),															// O - Left Engine Ignition
									   DOWN+L_SHIFT, D(10), PULSE+HOME, D(), UP+L_SHIFT ));						// 	   Throttle Left - IDLE

	// EOLMOTOR
	MapKeyIO(&Throttle, EOLMOTOR, 0,																			// I - 
								groundcrewstartup); 															// O - Ground Crew Start-up

	// EORIGN
	MapKeyIO(&Throttle, EORIGN, 0,																				// I - 
								CHAIN( DX12, D(300), 															// O - Right Engine Ignition
									   DOWN+R_SHIFT, D(10), PULSE+HOME, D(), UP+R_SHIFT ));						// 	   Throttle Right - IDLE

	// Engine Override
	// EFL in Phantom main script
	// EFRNORM
	MapKeyIOUMD(&Throttle, EFRNORM, 0,																			// IU - 
								CHAIN( 0,																		// OU - // TODO AAR stuff ********
									   EXEC( "AAR_mode = 0;" 													//		AAR_mode off
											 "printf(\"AAR_mode = 0\\xa\");" )),								// 
								0,																				// IM - 
								0,																				// OM - 
								0,																				// ID - 
								0);																				// OD - 
	// EFROVER
	MapKeyIOUMD(&Throttle, EFROVER, 0,																			// IU - 
								CHAIN( 0,																		// OU - // TODO AAR stuff ********
									   EXEC( "AAR_mode = 1;"													//		AAR_mode on
											 "printf(\"AAR_mode = 1\\xa\");" )),								// 
								PULSE+'p',																		// IM - Drag-Parachute - Deploy
								CHAIN( DOWN+L_CTL+L_WIN, D(10), PULSE+'h', D(), UP+L_CTL+L_WIN ),				// OM - Arresting Hook Control Handle - Out
								0,																				// ID - 
								0);																				// OD - 
	MapKeyRIOUMD(&Throttle, EFROVER, 0,																			// IU - 
								0,																				// OU -
								CHAIN( DOWN+R_CTL, D(10), PULSE+'p', D(), UP+R_CTL ),							// IM - Release Drag-Parachute
								CHAIN( DOWN+L_SHIFT+L_WIN, D(10), PULSE+'h', D(), UP+L_SHIFT+L_WIN ),			// OM - Arresting Hook Control Handle - In
								0,																				// ID - 
								0);																				// OD - 

	// SC
	MapKeyIO(&Throttle, SC, 	TEMPO( CHAIN( DOWN+R_CTL, D(10), PULSE+INS, D(), UP+R_CTL ),					// I - [short] re-centre IR tracker
									   CHAIN( DOWN+L_SHIFT, D(10), PULSE+'`', D(), UP+L_SHIFT ),				//     [long] discord game overlay
									   500),
								0 );																			// O - 


	// U LAYER - [O] Air-to-Air Mode
	//			 [I] ACM Mode
	// BSF - LED1 ON/OFF
	MapKeyIO(&Throttle, BSF, 	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'h', D(), UP+L_SHIFT, D(200),							// I - HUD Mode - A/A
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1) ), 									// 	   LED1 ON for U layer
								CHAIN( DOWN+L_SHIFT, D(10), PULSE+'h', D(), UP+L_SHIFT, D(200),							// O - HUD Mode - A/A
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1) )); 									// 	   LED1 ON for U layer
	MapKeyRIO(&Throttle, BSF, 	CHAIN( 0,																				// I - 
									   DOWN+L_ALT, D(10), PULSE+'h', D(), UP+L_ALT, D(200),								// 	   HUD Mode - Cage
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1) ), 									// 	   LED1 OFF for U layer 
								CHAIN( DOWN+L_ALT, D(10), PULSE+'h', D(), UP+L_ALT, D(200),								// O - HUD Mode - Cage
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1) )); 									// 	   LED1 OFF for U layer

	// M LAYER - Navigation Mode
	// BSM - LED2 ON/OFF
	MapKey(&Throttle, BSM, 		LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2)); 											// LED2 ON for M layer
	MapKeyR(&Throttle, BSM, 	LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2)); 											// LED2 OFF for M layer

	// D LAYER - Air-to-Ground Mode
	// BSB - LED3 ON/OFF
	MapKeyIO(&Throttle, BSB, 	CHAIN( EXEC( "Throttle[BSB] = 0; DefEventHandler(EV_HID_INPUT_DATA, &Throttle, BSB);"),	// I - Temporary virtual M layer (reset D layer)
									   EXEC( "CAR_mode = 1;"															// 	   Set CAR_mode ON
											 "printf(\"CAR_mode = 1\\xa\");" ),											// 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5) ),									//     LED5 ON
								CHAIN( DOWN+L_CTL, D(10), PULSE+'h', D(), UP+L_CTL, D(100),								// O - HUD Mode - A/G
									   EXEC( "if((index_stpt_aa)%3 == 2) index_stpt_ag = 4;"							// 	   Set correct steerpoint in A-G mode (element 0 is first element in list)
											 "else index_stpt_ag = (index_stpt_aa)%3;" ),								// 
									   EXEC( "if(Joystick[S3]) {"														// 	   If JSTR shift is pressed
											   "LTRN_mode = 1;"															// 	   LTRN_mode ON
											   "printf(\"LTRN_mode = 1\\xa\");"											// 
											   "dcs_f4e_jester_lantirn_controls();"										//	   Load JESTER LANTIRN controls
											   "}" ),																	//
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3) )); 									//     A-G mode on, LED3 ON for D layer
	MapKeyRIO(&Throttle, BSB, 	CHAIN( EXEC( "CAR_mode = 0;"															// I - Set CAR_mode OFF
											 "printf(\"CAR_mode = 0\\xa\");" ),											// 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5) ),									//     LED5 OFF
								CHAIN( DOWN+L_ALT, D(10), PULSE+'h', D(), UP+L_ALT, D(),								// O - HUD Mode - Cage
									   EXEC( "if((index_stpt_ag)%5 > 1) index_stpt_aa = 2;"								// 	   Set correct steerpoint in A-A mode (IP and ST default to WP3, element 0 is first element in list)
											 "else index_stpt_aa = (index_stpt_ag)%5;" ),								//
									   EXEC( "LTRN_mode = 0;"															//     LTRN_mode OFF
											 "printf(\"LTRN_mode = 0\\xa\");" ),										// 
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3) ));									// 	   A-G mode off, LED3 OFF for D layer

	
	
	// -------------------- Also load JESTER part of PILOT controls -------------------------------
	
	dcs_f4e_pilot_controls_jstr();



}	// end dcs_f4e_pilot_controls()	===============================================================




// -------------------- PILOT CONTROLS to be switched back after JESTER use -----------------------

int dcs_f4e_pilot_controls_jstr()
{


	// Target Management Switch
	// H2U
	MapKeyIO(&Joystick, H2U, 	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'d', D(), UP+L_SHIFT ),								// I - Gun/Missile Pinky Switch - Radar
								USB[0x55] );																			// O - zoom in  (KP*)
	// H2D
	MapKeyIO(&Joystick, H2D, 	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'w', D(), UP+L_SHIFT ), 								// I - Gun/Missile Pinky Switch - Gun
								USB[0x54] );																			// O - zoom out  (KP\)
	// H2R							
	MapKeyIO(&Joystick, H2R, 	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'s', D(), UP+L_SHIFT ), 								// I - Gun/Missile Pinky Switch - Heat
								CHAIN( L_WIN, D(10), KP6 ));															// O - snap view radar
	// H2L
	MapKeyIO(&Joystick, H2L, 	0,																						// I -
								CHAIN( DOWN+R_SHIFT, D(10), PULSE+BSP, D(), UP+R_SHIFT, D(),							// O - remove stick
								L_WIN, D(10), KP2 ));																	//     snap view instruments
	MapKeyRIO(&Joystick, H2L, 	0,																						// I - 
								CHAIN( D(200), DOWN+R_CTL, D(10), PULSE+BSP, D(), UP+R_CTL ));							// O - place stick


	// Display Management Switch
	// H3U
	MapKeyIO(&Joystick, H3U, 	TEMPO( CHAIN( DOWN+R_SHIFT, D(10), PULSE+'k', D(), UP+R_SHIFT ),						// I - kneeboard on/off
									   nightvision, 500 ),																// 	   [long] Night Vision Goggles toggle
								TEMPO( 0,																				// O - 
									   CHAIN( DOWN+L_CTL, D(10), PULSE+'v', D(), UP+L_CTL ), 500 ));					// 	   [long] Helmet Visor toggle
	// H3D
	MapKeyIO(&Joystick, H3D, 	TEMPO( CHAIN( DOWN+R_CTL, D(10), PULSE+'k', D(), UP+R_CTL ),							// I - kneeboard current position mark point
									   flashlight, 500 ),																//	   [long] Flashlight on/off	
								CHAIN( 0 ));																			// O - 
	// H3R
	MapKeyIO(&Joystick, H3R, 	TEMPO( PULSE+']', 																		// I - kneeboard next page
									   CHAIN( DOWN+L_SHIFT, D(10), PULSE+'v', D(), UP+L_SHIFT ), 500 ),   				// 	   [long] Sunglasses toggle
								0 );																					// O - 
	// H3L
	MapKeyIO(&Joystick, H3L, 	TEMPO( PULSE+'[', 																		// I - kneeboard previous page
									   CHAIN( DOWN+R_SHIFT, D(10), PULSE+'p', D(), UP+R_SHIFT ), 500 ),					//	   [long] Pilot Body toggle								
								0 );																					// O - 



	// Coolie Switch
	// CSU
	MapKeyIOUMD(&Throttle, CSU, CHAIN( L_SHIFT, D(10), '-'),										 					// IU - Aural Tone Volume - [Dec]
								EXEC( "if (index_mslcw > 0) {"															// OU - Radar-Missile CW - [Down]
									  	"index_mslcw = (index_mslcw-1)%3;"												// 
     	 							  	"ActKey( KEYON+PULSE+X(missilecwlist, index_mslcw) );"							//
										"}" ),																			//
								0,																	  					// IM - 
								0,																	 					// OM - 
								CHAIN( L_SHIFT, D(10), '-'),										 					// ID - Aural Tone Volume - [Dec]
								JSTR_agwpn_comptgt ); 																	// OD - Set Computer Target Weapons (CCRP)
	// CSD
	MapKeyIOUMD(&Throttle, CSD, CHAIN( L_SHIFT, D(10), '='),										 					// IU - Aural Tone Volume - [Inc]
								EXEC( "if (index_mslcw < 2) {"															// OU - Radar-Missile CW - [Up]
									  	"index_mslcw = (index_mslcw+1)%3;"												// 
     	 							  	"ActKey( KEYON+PULSE+X(missilecwlist, index_mslcw) );"							//
										"}" ),																			//
								0,																	  					// IM - 
								0,																	 					// OM - 
								CHAIN( L_SHIFT, D(10), '='),										 					// ID - Aural Tone Volume - [Inc]
								JSTR_agwpn_comppilot );												 					// OD - Set Computer Pilot Weapons (CCIP)
	// CSR
	MapKeyIOUMD(&Throttle, CSR, 0,																						// IU - 
								'n',																					// OU - Air Refuel Release Button (ARR) - missile uncage
								CHAIN( DOWN+R_CTL, D(10), PULSE+'b', D(), UP+R_CTL ),									// IM - Bombing Table - [Toggle]
								PULSE+'n', 																				// OM - Air Refuel Release Button (ARR)
								CHAIN( DOWN+R_CTL, D(10), PULSE+'b', D(), UP+R_CTL ),									// ID - Bombing Table - [Toggle]
								0 );																					// OD - 
	// CSL
	MapKeyIOUMD(&Throttle, CSL, 0,																						// IU - Wing Sweep Aft
								CHAIN( DOWN+'c', D(200), UP+'c' ),														// OU - Cage Button
								0,																						// IM - Wing Sweep Aft
								0,																						// OM - 
								0,																						// ID - Wing Sweep Aft
								CHAIN( DOWN+'c', D(200), UP+'c' ));														// OD - Cage Button


} 	// end of dcs_f4e_pilot_controls_jstr()	======================================================================