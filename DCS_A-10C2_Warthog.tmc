// DCS A-10C2 Warthog Thrustmaster Warthog/AVA/MFD Script by Astro
// TARGET version 3.0.24.618
// version 2.0, Jan 2025


include "target.tmh"
include "DCS_Fighter_Common.tmc"


// ------------------------ INITIALISE ------------------------------

int mastermode;
int mastermodecontrolbutton;
int mastermode_aa;
int mastermode_nav;
int deferdelay;

define AB 100											// detent position at AB% of full throttle reach



// -------------------------- MAIN A-10C2 ---------------------------------------------------------

int main()
{
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&Joystick, MODE_EXCLUDED);                    // Warthog Joystick excluded
	Configure(&JoystickF18, MODE_EXCLUDED);
	//Configure(&Throttle, MODE_EXCLUDED);                  // Warthog Throttle included
	Configure(&A320Pilot, MODE_EXCLUDED);
	Configure(&A320Copilot, MODE_EXCLUDED);
	Configure(&TCAQuadrant12, MODE_EXCLUDED);
	Configure(&TCAQuadrant34, MODE_EXCLUDED);
	Configure(&TCAYokeBoeing, MODE_EXCLUDED);
	Configure(&TCAQBoeing12, MODE_EXCLUDED);
	Configure(&TCAQBoeing34, MODE_EXCLUDED);
	Configure(&TCASidestickXPilot, MODE_EXCLUDED);
	Configure(&TCASidestickXCopilot, MODE_EXCLUDED);
	Configure(&ViperTQS, MODE_EXCLUDED);
	Configure(&ViperBBox, MODE_EXCLUDED);
	//Configure(&AVA_F16, MODE_EXCLUDED);					// AVA F16 included
    Configure(&AVA_F18, MODE_EXCLUDED);
	Configure(&FarmStickRight, MODE_EXCLUDED);
	Configure(&FarmStickLeft, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&T16000L, MODE_EXCLUDED);
	//Configure(&LMFD, MODE_EXCLUDED);						// Left MFD included
	Configure(&RMFD, MODE_EXCLUDED);						// Right MFD excluded
	Configure(&TFRPRudder, MODE_EXCLUDED);
	Configure(&TWCSThrottle, MODE_EXCLUDED);
	Configure(&TFRPHARudder, MODE_EXCLUDED);
	
	if(Init(&EventHandle)) return 1;
	
	SetKBRate(40, 50);																							// (a < b) a = pulse duration, b = delay duration
	SetKBLayout(KB_ENG);
	
	// ---------------------- IOUMD Buttons -------------------------
	
	SetShiftButton(&AVA_F16, S4, &Throttle, BSF, BSB, 0);
	
	// -------------------- COMMON FUNCTIONS ------------------------
					
	dcs_fighter_common_functions();						// load dcs COMMON functions
	

	// -------------------- AIRCRAFT FUNCTIONS ----------------------
	
	// Start-up Sequence (in Common)
	startup = SEQ( CHAIN( DOWN+R_SHIFT, D(10), PULSE+'s', D(), UP+R_SHIFT ), 					// Battery power
				   CHAIN( DOWN+L_ALT, D(10), PULSE+'s', D(), UP+L_ALT ), 						// Inverter STBY
				   CHAIN( DOWN+R_CTL, D(10), PULSE+'s', D(), UP+R_CTL )); 						// APU generator power

	// Gound Crew (in Common)
	groundcrew = CHAIN( PULSE+USB[0x31], D(200), PULSE+F11, D(200), PULSE+F8, D(200), PULSE+F5, D(200), PULSE+F2 );		// Radio menu (\), Prev, GroundCrew, Wheel Chocks, Remove

	// Master Modes function
	mastermode = 0;																			// mastermode 0,1,2,3		NAV, GUN, CCIP, CCRP
	deferdelay = 0;
	
	mastermodecontrolbutton = CHAIN( PULSE+'m',
									 EXEC( "mastermode = (mastermode+1)%4;" ));				// keeps track of current mastermode (assumes start in NAV)
							   
	mastermode_aa = CHAIN( DOWN+'m', D(1000), UP+'m' );										// master mode A-A
	
	mastermode_nav = EXEC( "while (mastermode != 0)  {"										// return to master mode NAV
							 "DeferCall( deferdelay, &ActKey, PULSE+KEYON+'m' );"			// delayed pulse to give a/c time to switch mode
							 "mastermode = (mastermode+1)%4;"								// walk through all modes (until NAV)
							 "deferdelay = deferdelay + 100;"								// delay is absolute, so needs to be increased for every while loop
							 //"printf(\" mastermode %i \\xa\", mastermode);"				// print current mastermode in output window
						   "}" );


	// Exterior Lighting
	extlight_full 		= CHAIN( DOWN+L_CTL, D(10), PULSE+'p', D(), UP+L_CTL, D(100),									// Exterior Light per Lighting Panel (pinky switch aft)
						   		 DOWN+L_SHIFT+L_CTL, D(10), PULSE+'l', D(), UP+L_SHIFT+L_CTL, D(100),					// Anti-Collision Lights - ON
						   		 DOWN+L_ALT+L_CTL, D(10), PULSE+'m', D(), UP+L_ALT+L_CTL, D(100),						// Position Lights Steady
						   		 LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4), D(),	 									// LED4 ON
						   		 DOWN+L_ALT+L_CTL, D(10), DOWN+'l', D(800), UP+'l', D(), UP+L_ALT+L_CTL );				// Formation Lights Decrease
	extlight_position 	= CHAIN( DOWN+L_ALT, D(10), PULSE+'p', D(), UP+L_ALT, D(100),									// position lights to dimsteady / strobes off (pinky switch fwd)
							     DOWN+L_ALT+L_CTL, D(10), PULSE+'m', D(), UP+L_ALT+L_CTL, D(),							// Position Lights Steady
							     LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4), D(), 										// LED4 ON
							     DOWN+L_ALT+L_CTL, D(10), DOWN+'l', D(800), UP+'l', D(), UP+L_ALT+L_CTL );				// Formation Lights Decrease
	extlight_formation 	= CHAIN( DOWN+L_CTL, D(10), PULSE+'p', D(), UP+L_CTL, D(100),									// Exterior Light per Lighting Panel (pinky switch aft)
								 DOWN+L_ALT+L_CTL, D(10), PULSE+'k', D(), UP+L_ALT+L_CTL, D(100), 						// Position Lights Off
								 DOWN+L_ALT+L_SHIFT, D(10), DOWN+'l', D(400), UP+'l', D(), UP+L_ALT+L_SHIFT, D(100),	// Formation Lights Increase
								 LED(&Throttle, LED_ONOFF, LED_CURRENT+LED4) );	 										// LED4 ON
	extlight_covert 	= CHAIN( DOWN+L_SHIFT, D(10), PULSE+'p', D(), UP+L_SHIFT, D(), 									// All Covert (pinky switch centre)
							 	 LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4) ); 										// LED4 OFF	


	// Speedbrake functions (overwrite Common)
	speedbrakes_open  = CHAIN( EXEC( "StopAutoRepeat(6);" ), D(), 												// stop repeat in case speedbrakes are still closing
							   DX32 );																			// press DX32 to open (Speed Brake Switch Aft)

	speedbrakes_close = CHAIN( REXEC( 6, 50, "ActKey( PULSE+KEYON+DX31 );", RNOSTOP ),							// press DX31 to close, every 50ms (Speed Brake Switch Forward)
							   D(3000),																			// repeat for 3 seconds
							   EXEC( "StopAutoRepeat(6);" ));													// stop repeat
						   




	// -------------------- COMMON CONTROLS -------------------------
					
	dcs_fighter_common_controls();						// load dcs COMMON controls
	dcs_fighter_mfd();									// load dcs MFD controls (in DCS_Fighter_Common.tmc)
														// before aircraft controls, to allow for overwriting of common controls when necessary


	// -------------------- AIRCRAFT CONTROLS -----------------------

	// ---------------------- FLIGHT STICK --------------------------

	// --DCS_Fighter_Common---------
	// TG - Camera/Gun Trigger
	// S1 - Nosewheel Steering Button
	// H1 - Trim Switch
	// JOYX
	// JOYY
	// -----------------------------	



	// Weapon Release Button  ---  moved to Common
	// S2
//	MapKeyIO(&AVA_F16, S2,  	CHAIN( L_CTL, D(10), 'w' ), 													// I - Jettison Weapons
//								DX2);																			// O - Weapon Release

	// Expand FOV Button - S3
	MapKeyUMD(&AVA_F16, S3,  	0,																				// U - [always use A-A]
							    PULSE+'m',															 			// M - [always use NAV]
							    mastermodecontrolbutton);														// D - Master Mode Control Button


	// Target Management Switch
	// H2U
	MapKeyIO(&AVA_F16, H2U, 	CHAIN( L_CTL, D(10), UARROW ),													// I - TMS up
							 	DX7 );		 																	// O - zoom in  (KP*)
	// H2D
	MapKeyIO(&AVA_F16, H2D, 	CHAIN( L_CTL, D(10), DARROW ),													// I - TMS down
							 	DX9 );																			// O - zoom out (KP\)
	// H2R							
	MapKeyIO(&AVA_F16, H2R, 	CHAIN( L_CTL, D(10), RARROW ),													// I - TMS right
							 	DX8 ); 																			// O - snap view right MFD (LWIN+KP6)
	// H2L
	MapKeyIO(&AVA_F16, H2L, 	CHAIN( L_CTL, D(10), LARROW ),													// I - TMS left
							 	DX10 ); 																		// O - snap view left MFD (LWIN+KP4)

	// Display Management Switch - moved to Common  //TODO test
	// H3U
//	MapKeyIO(&AVA_F16, H3U, 	TEMPO( CHAIN( DOWN+R_SHIFT, D(10), PULSE+'k', D(), UP+R_SHIFT ),				// I - kneeboard on/off
//									   nightvision, 500 ),														//	   [long] Night Vision Goggles
//								'u' );																			// O - Coolie Switch Up
	// H3D
//	MapKeyIO(&AVA_F16, H3D, 	TEMPO( CHAIN( DOWN+R_CTL, D(10), PULSE+'k', D(), UP+R_CTL ),					// I - kneeboard current position mark point
//									   flashlight, 500 ),														//	   [long] Flashlight on/off
//								'j' );																			// O - Coolie Switch Down
	// H3R
//	MapKeyIO(&AVA_F16, H3R, 	PULSE+']', 																		// I - kneeboard next page
//								'k' );																			// O - Coolie Switch Right
	// H3L
//	MapKeyIO(&AVA_F16, H3L, 	PULSE+'[', 																		// I - kneeboard previous page
//								'h' );																			// O - Coolie Switch Left


 	// Countermeasure Management Switch
	// H4U
	MapKeyIO(&AVA_F16, H4U, 	CHAIN( DOWN+R_ALT, D(10), PULSE+RARROW, D(), UP+R_ALT ),						// I - Boat Switch - Fwd
							 	'7' );																			// O - Countermeasures Management Switch - Fwd
	// H4D
	MapKeyIO(&AVA_F16, H4D, 	CHAIN( DOWN+R_ALT, D(10), PULSE+LARROW, D(), UP+R_ALT ),						// I - Boat Switch - Aft
							 	'8' ); 																			// O - Countermeasures Management Switch - Aft
	// H4R
	MapKeyIO(&AVA_F16, H4R, 	CHAIN( DOWN+R_ALT, D(10), PULSE+DARROW, D(), UP+R_ALT ),						// I - Boat Switch - Centre
			  				 	'0' );																			// O - Countermeasures Management Switch - Right
	// H4L
	MapKeyIO(&AVA_F16, H4L, 	0, 																				// I - 
							 	'9' ); 																			// O - Countermeasures Management Switch - Left
	// H4P
	MapKeyIO(&AVA_F16, H4P, 	0, 																				// I - 
							 	'-' );																			// O - Countermeasures Management Switch - Push



 
	// ------------------------ THROTTLE ----------------------------

	// --DCS_Fighter_Common---------
	// Left Throttle Button
	// MSU/D/P
	// EACON/OFF Landing Gear
	// EOLNORM
	// EORNORM/MOTOR
	// EFRNORM/OVER
	// SC
	// APUON/OFF
	// RDRNRM/DIS Canopy
	// LDGH
	// IDLELON/IDLERON
	// THR_LEFT
	// THR_RIGHT
	// THR_FC
	// SCX
	// SCY
	// -----------------------------



	// Autopilot
	// APENG	
	MapKeyIO(&Throttle, APENG, 	0,																				// I - 
								'a' );																			// O - LAAP Engage/Disengage
	// APDIS
	MapKey(&Throttle, APDIS, 	0); 																			// 
	// APPAT
	MapKey(&Throttle, APPAT, 	PULSE+'2' );											 						// LAAP Path Hold
	// APAH
	MapKey(&Throttle, APAH, 	PULSE+'3' );																	// LAAP Altitude/Heading Hold
	// APALT
	MapKey(&Throttle, APALT, 	PULSE+'4' );																	// LAAP Altitude/Bank Hold

	
	// Landing Gear / EAC
	// EACON
	MapKeyIOUMD(&Throttle, EACON,	0, 																			// IU - 
									0,																			// OU - 
									CHAIN( DOWN+R_SHIFT, D(10), PULSE+'e', D(), UP+R_SHIFT ),					// IM - EAC Arm
									CHAIN( DOWN+L_CTL, D(10), PULSE+'g', D(), UP+L_CTL ), 						// OM - gear up 
									0,																			// ID - 
									0);																			// OD -
	// EACOFF
	MapKeyIOUMD(&Throttle, EACOFF, 	0, 																			// IU -
									0,																			// OU - 
									0,																			// IM - 
									CHAIN( DOWN+L_SHIFT, D(10), PULSE+'g', D(), UP+L_SHIFT ), 					// OM - gear down
									0,																			// ID - 
									0);																			// OD -

	
	// Coolie Switch
	// CSU
	MapKeyIO(&Throttle, CSU, 	CHAIN( DOWN+L_SHIFT, D(10), PULSE+'.', D(), UP+L_SHIFT ),						// I - UFC STEER DOWN Rocker switch
								END );																			// O - DMS down
	// CSD
	MapKeyIO(&Throttle, CSD, 	CHAIN( DOWN+L_SHIFT, D(10), PULSE+';', D(), UP+L_SHIFT ),						// I - UFC STEER UP Rocker switch
								HOME );																			// O - DMS up
	// CSR
	MapKeyIO(&Throttle, CSR, 	0, 																				// I - 
								PGDN );																			// O - DMS right
	// CSL
	MapKeyIO(&Throttle, CSL, 	0,							 													// I - 
								DEL );																			// O - DMS left




	// Speedbrake Switch   // TODO TEST
	// SPDF
//	MapKeyIO(&Throttle, SPDF, 	CHAIN( DOWN+R_SHIFT, D(10), PULSE+USB[0x55], D(), UP+R_SHIFT ),					// I - snap zoom max   (R_SHIFT+KP*)
//							   	speedbrakes_open );																// O - Open Speed Brakes (Speed Brake Switch Aft)
//	MapKeyRIO(&Throttle, SPDF, 	PULSE+KPENT,																	// I - snap zoom normal
//								speedbrakes_close );															// O - Close Speed Brakes (Speed Brake Switch Forward)
	// SPDB
//	MapKeyIOUMD(&Throttle, SPDB, CHAIN( DOWN+R_SHIFT, D(10), PULSE+USB[0x54], D(), UP+R_SHIFT ),				// IU - snap zoom min    (R_SHIFT+KP/)
//								speedbrakes_open,																// OU - Open Speed Brakes Momentary (Speed Brake Switch Aft)
//								EXEC( "if(WHDN_mode) ActKey( KEYON+'w' );" 										// IM - [WHDN] wheel brake
//									  "else ActKey( PULSE+KEYON+USB[0x54] );" ),								//		snap zoom min
//								speedbrakes_open,																// OM - Open Speed Brakes Momentary (Speed Brake Switch Aft)
//								CHAIN( DOWN+R_SHIFT, D(10), PULSE+USB[0x54], D(), UP+R_SHIFT ),					// ID - snap zoom min    (R_SHIFT+KP/)
//								speedbrakes_open );																// OD - Open Speed Brakes Momentary (Speed Brake Switch Aft)
//	MapKeyRIOUMD(&Throttle, SPDB, PULSE+KPENT,																	// IU - snap zoom normal
//								speedbrakes_close,																// OU - Close Speed Brakes (Speed Brake Switch Forward)
//								EXEC( "if(WHDN_mode) ActKey( 'w' );"											// IM - [WHDN] release 'w'
//									  "else ActKey( PULSE+KEYON+KPENT );" ),									//		snap zoom normal
//								speedbrakes_close,																// OM - Close Speed Brakes (Speed Brake Switch Forward)
//								PULSE+KPENT,																	// ID - snap zoom normal
//								speedbrakes_close );															// OU - Close Speed Brakes (Speed Brake Switch Forward)
	
						
	// China Hat
	// CHF
	MapKeyIO(&Throttle, CHF, 	brightness_up, 																	// I - brightness up for goggle/HMCS
							 	'v' );																			// O - China Hat Fwd
	// CHB
	MapKeyIO(&Throttle, CHB, 	brightness_down,																// I - brightness down for goggle/HMCS
							 	'c' );																			// O - China Hat Aft

	// Pinky Switch (exterior lighting)
	// PSF
//	MapKeyIO(&Throttle, PSF, 	0,																					// I - 
//								extlight_full );		 															// O - Exterior Light Full (pinky switch aft)
//	MapKeyRIO(&Throttle, PSF, 	0, 																					// I - 
//							  	extlight_position );																// O - position lights to dimsteady / strobes off (pinky switch fwd)
	// PSB
//	MapKeyIO(&Throttle, PSB, 	extlight_formation, 																// I - formation lights (pinky switch aft)
//								extlight_covert );											 						// O - all covert (pinky switch centre)
//	MapKeyRIO(&Throttle, PSB, 	extlight_position,																	// I - position lights to dimsteady / strobes off (pinky switch fwd)
//							  	extlight_position );																// O - position lights to dimsteady / strobes off (pinky switch fwd)


	// Left Throttle Button
	MapKeyIO(&Throttle, LTB, 	CHAIN( DOWN+L_CTL, D(10), PULSE+'e', D(), UP+L_CTL ), 								// I - EJECT
								'q' );																				// O - Left Throttle Button
								

	// Flaps Switch 
	// FLAPU
	MapKey(&Throttle, FLAPU,  		CHAIN( DOWN+L_SHIFT, D(10), PULSE+'f', D(), UP+L_SHIFT ));						// Flaps Up
	MapKeyR(&Throttle, FLAPU,  		CHAIN( DOWN+L_CTL, D(10), PULSE+'f', D(), UP+L_CTL ));							// Flaps Down (to middle)	
	// FLAPM
	MapKey(&Throttle, FLAPM, 		0 );																			// 
	// FLAPD
	MapKey(&Throttle, FLAPD,  		CHAIN( DOWN+L_CTL, D(10), PULSE+'f', D(), UP+L_CTL ));							// Flaps Down (to full)
	MapKeyR(&Throttle, FLAPD,  		CHAIN( DOWN+L_SHIFT, D(10), PULSE+'f', D(), UP+L_SHIFT ));						// Flaps Up (to middle)


	// Engine Override Left
	// EFLNORM
	MapKeyIO(&Throttle, EFLNORM, 	0,																				// I - 
									CHAIN( PULSE+DX22, D(), 														// O - Flight control - NORMAL  ********* FIX DX in DCS
										   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5) ));							// 	   LED5 OFF for NORMAL
	// EFLOVER
	MapKeyIO(&Throttle, EFLOVER, 	0,																				// I - 
									CHAIN( PULSE+DX22, D(),															// O - Flight control - MANUAL REVERSION    ********* FIX DX in DCS
										   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED5) ));							// 	   LED5 ON for MANUAL

	// SC
	MapKeyIO(&Throttle, SC, 	TEMPO( CHAIN( DOWN+R_CTL, D(10), PULSE+INS, D(), UP+R_CTL ),					// I - [short] re-centre IR tracker
									   CHAIN( DOWN+L_SHIFT, D(10), PULSE+'`', D(), UP+L_SHIFT ),				//     [long] discord game overlay
									   500 ),
								'v' );																			// O - China Hat Fwd

	// U LAYER - Air-to-Air Mode
	// BSF - LED1 ON/OFF
	MapKeyIO(&Throttle, BSF, 	0,																				// I - 
								CHAIN( mastermode_aa, D(100),													// O - A-A mode on
									   //DOWN+R_SHIFT, D(10), PULSE+'a', D(), UP+R_SHIFT,	D(100),					// 	   Master switch ARM
									   //DOWN+R_SHIFT+R_CTL, D(10), PULSE+'g', D(), UP+R_SHIFT+R_CTL,				//     GUN/PAC switch GUNARM
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED1) )); 							// 	   LED1 ON for U layer
	MapKeyRIO(&Throttle, BSF, 	0,																				// I - 
								CHAIN( PULSE+'m', D(100),														// O - A-A mode off
									   //DOWN+R_CTL, D(10), PULSE+'a', D(), UP+R_CTL,	D(100),						//     Master switch SAFE
									   //DOWN+R_CTL, D(10), PULSE+'g', D(), UP+R_CTL,								//     GUN/PAC switch SAFE
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1) )); 							//     LED1 OFF for U layer
	
	// M LAYER - Navigation Mode
	// BSM - LED2 ON/OFF
	MapKey(&Throttle, BSM, 		CHAIN( D(200), LED(&Throttle, LED_ONOFF, LED_CURRENT+LED2) ));					// LED2 ON for M layer
	MapKeyR(&Throttle, BSM, 	LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2) ); 									// LED2 OFF for M layer

	// D LAYER - Air-to-Ground Mode
	// BSB - LED3 ON/OFF
	MapKeyIO(&Throttle, BSB, 	0,																				// I -
								CHAIN( mastermodecontrolbutton, D(100),											// O - A-G mode on
									   //DOWN+R_SHIFT, D(10), PULSE+'a', D(), UP+R_SHIFT,	D(100),					//     Master switch ARM
									   //DOWN+R_SHIFT, D(10), PULSE+'g', D(), UP+R_SHIFT,							//     GUN/PAC switch ARM
									   LED(&Throttle, LED_ONOFF, LED_CURRENT+LED3) )); 							//     LED3 ON for D layer
	MapKeyRIO(&Throttle, BSB, 	0,																				// I -
								CHAIN( mastermode_nav, D(100),													// O - A-G mode off
									   //DOWN+R_CTL, D(10), PULSE+'a', D(), UP+R_CTL,	D(100),						//     Master switch SAFE
									   //DOWN+R_CTL, D(10), PULSE+'g', D(), UP+R_CTL,								//     GUN/PAC switch SAFE
									   LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3) )); 							//     LED3 OFF for D layer


}	// =====  end main()  =========================================================================


// -------------------- AFTERBURNER DETENT --------------------------

int afterburnerdetent(int x)
{
	if (x == 1) {		// Activate detent
		SetCustomCurve(&Throttle, THR_LEFT, LIST(0,0, 25,25, 50,50, AB,AB, 100,AB));
	}
	else {				// Throttle back to full reach
		SetSCurve(&Throttle, THR_LEFT, 0, 0, 0, 0, 0);
	}
}



// ----------------------- EVENTHANDLE ------------------------------

int EventHandle(int type, alias o, int x)
{
	if ((&o == &Throttle) & (x == THR_LEFT)) {									// Detect left throttle position for afterburner detent
		if (afterburnerdetent_present & afterburnerdetent_lifted) {				// If afterburnerdetent present and detent is lifted
			if (Throttle[THR_LEFT] < (100-AB)*(2*AMAX)/100) {					//   If left throttle below afterburner detent value of AB%
				afterburnerdetent(1);											//     Re-engage detent
				afterburnerdetent_lifted = 0;									//     Detent is no longer lifted
			}
		} 
	}
	DefaultMapping(&o, x);
}